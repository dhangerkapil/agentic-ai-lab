{
  "version": "1.0",
  "python": [
    {
      "name": "minimal_sample",
      "category": "uncategorized",
      "file_path": "python\\samples\\getting_started\\minimal_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\minimal_sample.py",
      "language": "python",
      "processed": true,
      "description": "This minimal Python sample demonstrates the use of the Agent Framework with OpenAI's Chat Client to create a conversational agent capable of performing specific tool-based tasks, such as getting weather details for a location. Key concepts covered include annotating functions for integration as agent tools and orchestrating agent interactions. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this example useful for understanding how to transition custom functions into the Agent Framework environment.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "azure_ai_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_ai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_ai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates utilizing the AzureAIAgentClient for direct chatbot implementations, including streaming responses and tool invocation for custom logic integration. The code provides a practical example of fetching weather data using function calls based on user queries, benefiting developers seeking to integrate Azure AI tools into their projects or those migrating from frameworks like Semantic Kernel, LangChain, or AutoGen.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "azure_assistants_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the direct usage of the Azure OpenAI Assistants client to interact with chat assistants, showcasing integration with the Agent Framework. It provides examples of authentication with Azure CLI, handling both streaming and non-streaming message responses from the assistant, and incorporating function calls into conversations. Developers considering migration from frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample to understand Azure-specific implementations and patterns for enhancing chat applications.",
      "tags": [
        "chat_client",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of the AzureOpenAIChatClient within the Agent Framework to interact with Azure OpenAI services for chat-based functionalities. It showcases the integration of custom tools, such as a weather information provider, to extend query handling capabilities. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample as a direct implementation reference for integrating Azure-hosted AI services efficiently.",
      "tags": [
        "chat_client",
        "advanced",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_responses_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to use the AzureOpenAIResponsesClient from the Agent Framework for generating structured responses via Azure OpenAI service. It covers concepts such as tool integration with function calling, structured output definitions, and streaming capabilities which make it ideal for interactive and synchronous applications. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this example to understand how to leverage Azure's capabilities for chat response generation.",
      "tags": [
        "agent_framework",
        "chat_client",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "chat_response_cancellation",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\chat_response_cancellation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\chat_response_cancellation.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates utilizing the OpenAIChatClient from the Agent framework to manage streaming chat responses effectively, emphasizing proper task cancellation and resource cleanup using Python's asyncio. It highlights techniques crucial for graceful error handling and cancellation during asynchronous operations. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can leverage this example to understand optimized workflows for managing streaming chat interactions and resource lifecycle.",
      "tags": [
        "chat_client",
        "streaming",
        "asyncio",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of the OpenAIAssistantsClient within the Agent Framework for creating chat interactions with OpenAI assistants. Developers can observe its functionalities related to function calls for task execution, as well as automatic assistant setup. It is specifically useful for developers transitioning from Semantic Kernel, AutoGen, or LangChain to understand structured communication integration.",
      "tags": [
        "chat_client",
        "tools",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the direct usage of OpenAIChatClient for chat-based interactions using OpenAI models. It showcases function invoking capabilities by integrating custom logic tools to dynamically process user inquiries, such as fetching simulated weather information. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this example to understand structured interaction patterns prevalent in the Agent Framework.",
      "tags": [
        "chat_client",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the direct usage of the OpenAIResponsesClient component from the Agent Framework to implement structured response capabilities using OpenAI models. It demonstrates handling user queries with dynamic business logic, showcasing a weather information retrieval example. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to understand structured and tool-assisted response generation more effectively.",
      "tags": [
        "chat_client",
        "structured_output",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "simple_context_provider",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\simple_context_provider.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\simple_context_provider.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a straightforward implementation of a context provider within the Agent Framework, focusing on managing user-specific information during interactions with a conversational agent. It demonstrates concepts such as context provider lifecycle management, dynamic context generation, and structured user information extraction. Migrating developers from frameworks like AutoGen or Semantic Kernel will find it helpful for understanding the integration and customization of context data in conversational applications.",
      "tags": [
        "context_providers",
        "agent",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "in_memory_mode",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\in_memory_mode.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\in_memory_mode.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates how to use the Agent Framework's DevUI to set up an in-memory service for hosting agents and workflows as OpenAI-compatible API endpoints. Developers will learn to define tools for agents, design workflows with executors, and initialize a DevUI server for interacting with agents and workflows. This sample is crucial for those migrating from frameworks like LangChain or Semantic Kernel, providing foundational knowledge for implementing agent-based applications.",
      "tags": [
        "agent",
        "workflow",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "agent_as_mcp_server",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\agent_as_mcp_server.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\agent_as_mcp_server.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Agent Framework to expose a custom agent as an MCP server. It covers fundamental concepts such as agent creation, tool integration, and asynchronous server handling using standard input/output streams. Developers coming from frameworks such as LangChain or Semantic Kernel can reference this example to understand the process for exposing agent services in a standardized protocol.",
      "tags": [
        "agent",
        "middleware",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "mcp_api_key_auth",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\mcp_api_key_auth.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\mcp_api_key_auth.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of API key authentication with MCP tools within the Agent Framework. It provides a practical example of integrating MCP servers and utilizing tools in conjunction with an OpenAI chat client for executing queries. Developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain can reference this to understand the authentication and tool usage patterns in Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "agent_and_run_level_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\agent_and_run_level_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\agent_and_run_level_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integration of agent-level and run-level middleware within the Agent Framework, showcasing their use in security enforcement, performance monitoring, and context management. Developers migrating from frameworks such as AutoGen, LangChain, or Semantic Kernel will find this valuable for understanding middleware patterns and enhancing their agents. It is pertinent for developers aiming to implement complex workflows with differentiated middleware applications.",
      "tags": [
        "middleware",
        "agent_framework",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "chat_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\chat_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\chat_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates implementing and utilizing middleware in chat agents created using the Agent Framework. It covers concepts such as intercepting chat requests for logging, input modification, response overriding, and security filtration, showcasing both class-based and function-based middleware registration at varying levels. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this example to learn nuanced capabilities for chat system customization.",
      "tags": [
        "agent",
        "middleware",
        "chat",
        "autogen_migration"
      ]
    },
    {
      "name": "class_based_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\class_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\class_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a demonstration of implementing middleware in a class-based manner using the Agent Framework. It introduces two specific middleware examples: SecurityAgentMiddleware for validating queries against security rules, and LoggingFunctionMiddleware for tracking function execution metrics. Developers migrating from frameworks such as LangChain or Semantic Kernel can reference this example to learn how to structure middleware functionalities in object-oriented designs and enhance agent behaviors.",
      "tags": [
        "middleware",
        "agent",
        "langchain_migration",
        "intermediate"
      ]
    },
    {
      "name": "decorator_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\decorator_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\decorator_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of middleware functions using decorators within the Agent Framework, providing explicit classifications without requiring type annotations. Key concepts highlighted include the usage of @agent_middleware and @function_middleware for pre- and post-execution logic, and the seamless interaction with Azure services via credential management. Developers migrating from other frameworks like Semantic Kernel or LangChain should refer to this example to understand simplified middleware implementation techniques in agent-based workflows.",
      "tags": [
        "middleware",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "exception_handling_with_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\exception_handling_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\exception_handling_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates effective use of middleware in the Agent Framework to handle exceptions during function execution. It showcases mechanisms for catching specific errors (e.g., TimeoutError), providing user-friendly messages, and overriding function results to enhance the experience. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this when aiming to implement custom error mitigation practices within their agent workflows.",
      "tags": [
        "middleware",
        "agent",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "function_based_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\function_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\function_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates function-based middleware within the Agent Framework. It outlines how to implement and integrate async functions for observing operations and augmenting agent behaviors, such as security validation and logging. Developers transitioning from frameworks like Semantic Kernel or LangChain can leverage this example to understand middleware concepts adapted to the Agent Framework.",
      "tags": [
        "middleware",
        "intermediate",
        "autogen_migration",
        "observability"
      ]
    },
    {
      "name": "middleware_termination",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\middleware_termination.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\middleware_termination.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of middleware in the Agent Framework, specifically exploring mechanisms to terminate agent execution under specified conditions. It introduces two types of middleware: PreTerminationMiddleware, which halts processing based on input criteria, and PostTerminationMiddleware, which stops processing after meeting output limits. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should reference this sample to understand agent execution control and termination patterns.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "override_result_with_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\override_result_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\override_result_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of middleware to override and transform agent responses in both streaming and non-streaming scenarios using the Agent Framework. It showcases using middleware to modify function outputs post-execution, offering insight into result filtering, formatting, and enhancement. This is a valuable reference for developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain seeking advanced customization techniques.",
      "tags": [
        "middleware",
        "streaming",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "shared_state_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\shared_state_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\shared_state_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates implementing function-based middleware within the Agent Framework using shared state. It illustrates the use of a middleware container for enhancing workflow behavior through logic tied to shared state while interacting with agents provisioned via the Azure AI interface. Developers migrating from frameworks like Semantic Kernel or LangChain would find this example beneficial for integrating complex middleware pipelines seamlessly.",
      "tags": [
        "middleware",
        "intermediate",
        "semantic_kernel_migration",
        "workflow"
      ]
    },
    {
      "name": "azure_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\azure_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\azure_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of Azure OpenAI Chat Client, integrated with the Agent Framework, to analyze multimodal input including textual and imagery data. It focuses on authenticating via Azure CLI and generating image analysis responses, showcasing the capabilities of multimedia processing in conversational AI. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand multimodal capabilities in Azure's ecosystem.",
      "tags": [
        "multimodal",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_responses_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\azure_responses_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\azure_responses_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the utilization of the Azure OpenAI Responses API for processing multimodal inputs, specifically image and PDF analysis. It highlights the creation of a ChatMessage incorporating both text and media content using the Agent Framework, showcasing effective integration and workflow design. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this sample to understand multimodal input handling and efficient API interaction techniques.",
      "tags": [
        "agent",
        "multimodal",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\openai_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\openai_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of multimodal inputs with the OpenAI chat models using the Agent Framework. Specifically, it showcases handling images, audio files, and pdf documents to validate the framework's multimodal processing capabilities. Developers migrating from AutoGen, Semantic Kernel, or LangChain can refer to this for implementing comprehensive multimodal support in their applications.",
      "tags": [
        "multimodal",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "advanced_manual_setup_console_output",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\advanced_manual_setup_console_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\advanced_manual_setup_console_output.py",
      "language": "python",
      "processed": true,
      "description": "This advanced Python sample demonstrates manual setup of observability features like logging, tracing, and metrics, using the Agent Framework integrated with OpenTelemetry. It highlights direct configuration without relying on helper functions to enable telemetry outputs to the console, suitable for monitoring and troubleshooting. Developers migrating from frameworks such as AutoGen, Semantic Kernel, and LangChain can reference this sample to understand observability integration in applications and enhance their understanding of telemetry workflows.",
      "tags": [
        "observability",
        "advanced",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "advanced_zero_code",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\advanced_zero_code.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\advanced_zero_code.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates advanced observability techniques using the Agent Framework's capabilities without requiring code modifications. It highlights how to utilize OpenTelemetry auto-instrumentation to collect detailed telemetry data during AI service interactions. Developers migrating from frameworks like Semantic Kernel or LangChain should reference this utility to understand seamless observability integration for enhanced monitoring.",
      "tags": [
        "observability",
        "advanced",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of observability features within an Agent Framework application. By utilizing tracing and metrics setup, developers can effectively monitor agent interactions and evaluate their performance. This is particularly useful for those transitioning from frameworks like LangChain or Semantic Kernel, as it showcases comparable observability capabilities.",
      "tags": [
        "observability",
        "agent",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_agent_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\azure_ai_agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\azure_ai_agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to set up telemetry for an Azure AI agent using the Azure AI Agent Framework and OpenTelemetry integrations. It showcases configuring observability through Application Insights for performance monitoring and tracking, utilizing tools and custom agent workflows within a conversational interface. Developers migrating from frameworks like LangChain, AutoGen, or Semantic Kernel can use this sample to understand telemetry integration and enhance their observability capabilities.",
      "tags": [
        "agent",
        "observability",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_chat_client_with_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\azure_ai_chat_client_with_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\azure_ai_chat_client_with_observability.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of observability features within an Azure AI-based chat client using the Agent Framework. It showcases techniques for enabling telemetry collection and tracking service execution using OpenTelemetry standards, ensuring robust monitoring and diagnostics. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand effective integration of observability capabilities into their applications.",
      "tags": [
        "observability",
        "agent",
        "azure_ai",
        "intermediate"
      ]
    },
    {
      "name": "setup_observability_with_env_var",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\setup_observability_with_env_var.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\setup_observability_with_env_var.py",
      "language": "python",
      "processed": true,
      "description": "This insightful Python code sample demonstrates the setup and utilization of observability and telemetry in applications using the Agent Framework. Users learn how environment variables can configure observability, enabling seamless integration with external telemetry backends like Application Insights or OTLP endpoints. Especially recommended for developers transitioning from frameworks such as AutoGen or Semantic Kernel, this guide provides clarity on observability concepts and practices.",
      "tags": [
        "agent",
        "intermediate",
        "observability",
        "autogen_migration"
      ]
    },
    {
      "name": "setup_observability_with_parameters",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\setup_observability_with_parameters.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\setup_observability_with_parameters.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates setting up observability within the Agent Framework, focusing on metrics, traces, and logs integration with OTEL or Application Insights. Using the provided code, developers can explore AI function behaviors and chat client simulations while leveraging telemetry. Useful for those migrating from other frameworks such as LangChain or Semantic Kernel to implement observability effectively.",
      "tags": [
        "agent",
        "observability",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "workflow_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\workflow_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\workflow_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing a sequential workflow using Agent Framework while integrating observability features such as telemetry collection and tracing. It covers concepts like executor chaining, workflow execution monitoring, and the setup of observability providers. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this example to understand telemetry integration within structured workflows.",
      "tags": [
        "observability",
        "workflow",
        "agent",
        "intermediate"
      ]
    },
    {
      "name": "sample_purview_agent",
      "category": "purview_agent",
      "file_path": "python\\samples\\getting_started\\purview_agent\\sample_purview_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\purview_agent\\sample_purview_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the implementation of the Purview Agent Framework's middleware for policy enforcement in conversational AI models. It demonstrates configuring both agent-level and chat-client-level middleware that evaluate Purview policies, leveraging integration with Azure services. This resource is valuable for developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain who need to integrate advanced policy evaluation within their workflows.",
      "tags": [
        "agent",
        "middleware",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "custom_chat_message_store_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\custom_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\custom_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This code sample showcases how to implement and utilize a custom chat message store using the Agent Framework, along with integrating it into a conversational agent powered by an OpenAI Chat Client. It demonstrates threading functionality, serialization and deserialization of conversation states, and highlights extensibility for database backends. Developers migrating from frameworks like AutoGen or LangChain should explore this example for tailoring state management and persistence strategies.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "redis_chat_message_store_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\redis_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\redis_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration and utilization of Redis as a chat message store within the Microsoft Agent Framework, covering multiple threading scenarios such as manual storage management, user session management, and conversation persistence across application restarts.",
      "tags": [
        "agent",
        "intermediate",
        "redis",
        "autogen_migration"
      ]
    },
    {
      "name": "suspend_resume_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\suspend_resume_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\suspend_resume_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the suspension and resumption of agent-managed threads and in-memory threads using the Agent Framework's OpenAIChatClient. Developers learn to serialize and deserialize thread states for continued interactions, showcasing essential thread management capabilities. This is pertinent for developers migrating from frameworks like AutoGen or Semantic Kernel, where similar threading and state handling patterns are required.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "checkpoint"
      ]
    },
    {
      "name": "ai_tool_with_approval",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\ai_tool_with_approval.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\ai_tool_with_approval.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates how to use AI tools with required approval workflows in the Agent Framework. Developers learn to implement human-in-the-loop pattern for tool invocation and manage stepwise user interactions effectively. It is particularly useful for scenarios where migrating from frameworks like Semantic Kernel, AutoGen, or LangChain for enhanced tool deployment capabilities.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "ai_tool_with_approval_and_threads",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\ai_tool_with_approval_and_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\ai_tool_with_approval_and_threads.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample utilizes the Agent Framework to illustrate the integration of tools requiring user approval within conversational threads. It showcases key features such as tool management, thread utilization for context handling, and creating user input requests for approvals, while leveraging Azure OpenAI as the chat client. Developers migrating from frameworks like Semantic Kernel or LangChain will find this example insightful for implementing similar approval-based conversational designs.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "langchain_migration"
      ]
    },
    {
      "name": "failing_tools",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\failing_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\failing_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates handling tool exceptions within an agent framework, allowing the LLM to intelligently recover and continue processing. It illustrates how agents incorporate tools, enabling exception handling to ensure graceful recovery and uninterrupted conversations. Developers migrating from frameworks like AutoGen, LangChain, or Semantic Kernel can use this guide to understand integration of robust tool management within the Agent Framework.",
      "tags": [
        "tools",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "tool_with_injected_func",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\tool_with_injected_func.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\tool_with_injected_func.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create an AIFunction tool within an Agent Framework using dependency injection. It illustrates the deserialization of a tool definition and runtime function injection for dynamic functionality, showcasing advanced tool management patterns. Developers migrating from frameworks such as AutoGen and Semantic Kernel should reference this example to understand adaptable tool creation and dependency handling.",
      "tags": [
        "tools",
        "intermediate",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "final_test_report",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\final_test_report.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\final_test_report.py",
      "language": "python",
      "processed": true,
      "description": "This sample focuses on generating a comprehensive test report for notebooks within various workflow categories, emphasizing the utilization of Azure OpenAI services for code execution and validation. It introduces techniques for programmatically inspecting and executing code cells within Jupyter notebooks and dynamically categorizes the outcomes based on functionality and success rates. Developers migrating from frameworks such as Semantic Kernel or AutoGen can use this sample for understanding efficient validation practices and integration of Azure tools.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "observability"
      ]
    },
    {
      "name": "fix_fan_out",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_fan_out.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_fan_out.py",
      "language": "python",
      "processed": true,
      "description": "This code sample addresses adjusting notebook files to correctly utilize environmental variable loading, avoiding common pitfalls in import statements. It demonstrates efficient processing of JSON-based notebook structures with Python, focusing on maintaining the integrity of Agent Framework workflows. Developers migrating from platforms such as Semantic Kernel or LangChain seeking to integrate robust loading mechanisms should explore this sample.",
      "tags": [
        "workflows",
        "python",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "fix_missing_newlines",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_missing_newlines.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_missing_newlines.py",
      "language": "python",
      "processed": true,
      "description": "This Python code demonstrates a utility function to correct missing newline characters in Jupyter notebook cells, particularly those containing Python code blocks. This script showcases workflows for debugging and fixing structured JSON data while preserving the integrity of notebook content. Developers migrating from other frameworks such as LangChain or AutoGen can refer to this sample for managing and modifying structured data in their projects.",
      "tags": [
        "workflow",
        "intermediate",
        "structured_output",
        "tools"
      ]
    },
    {
      "name": "fix_syntax_in_imports",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_syntax_in_imports.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_syntax_in_imports.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample provides a solution to automatically fix specific syntactic issues in Jupyter notebooks related to import statements, particularly for 'load_dotenv' in 'agent_framework' imports. It illustrates how workflows can programmatically adjust notebook content to adhere to correct syntax and includes capabilities to identify and correct errors across multiple files. Developers migrating notebooks or projects from frameworks like AutoGen, Semantic Kernel, or LangChain to an Agent Framework can leverage this sample to ensure proper handling of environment variables and import organization.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "checkpoint"
      ]
    },
    {
      "name": "fix_syntax_simple",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_syntax_simple.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_syntax_simple.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a workflow for correcting syntax errors in Jupyter Notebook files used in the Agent Framework. It specifically addresses misplaced `load_dotenv()` calls within import statements and adds missing environment variable definitions, thereby ensuring compatibility with the framework's execution environment. Refer to this guide during migration from frameworks such as AutoGen, Semantic Kernel, or LangChain when adapting notebook-based workflows.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "test_all_notebooks",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\test_all_notebooks.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\test_all_notebooks.py",
      "language": "python",
      "processed": true,
      "description": "This Python script demonstrates a workflow for validating Jupyter notebooks by checking the syntax of their first code cell and analyzing their configuration for specific environment dependencies, such as dotenv and Azure OpenAI integrations. Essential for ensuring notebook compatibility, this guide is helpful for developers migrating their workflows and analysis tools from other frameworks like LangChain or Semantic Kernel to establish proper syntax and dependency setup in their codebase.",
      "tags": [
        "workflow",
        "intermediate",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "agent_with_a2a",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\a2a\\agent_with_a2a.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\a2a\\agent_with_a2a.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a practical guide for using the A2A communication protocol to enable interoperability between agents built on different frameworks. It covers essential concepts such as resolving AgentCards, initializing A2AAgents, and translating messages into the A2A format for effective communication. Developers transitioning from other framework paradigms like LangChain or Semantic Kernel can utilize this implementation to understand and adopt standardized agent interactions.",
      "tags": [
        "agent",
        "intermediate",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "anthropic_with_openai_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\anthropic\\anthropic_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\anthropic\\anthropic_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This code sample provides an example of integrating Anthropic models with an OpenAI Chat Client using the Agent Framework, highlighting cross-provider capabilities and tools integration. It demonstrates structured interaction, non-streaming and streaming responses, and dynamic tool implementation for enhanced functionalities. Developers migrating from frameworks like Semantic Kernel, LangChain, or AutoGen can leverage this sample to understand cross API integrations and advanced agent configuration.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_ai_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_basic.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the use of the Azure AI Agent Framework to create and manage AI-powered agents. It covers both streaming and non-streaming response capabilities and shows integration with Azure authentication through AzureCliCredential. Developers familiar with frameworks like Semantic Kernel, AutoGen, or LangChain will find this example useful for understanding the core concepts and migrating their existing implementations to Azure AI's agent-oriented structure.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "azure_ai_with_azure_ai_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_azure_ai_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_azure_ai_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates integrating an Azure AI agent with Azure AI Search to process and respond to hotel-related queries using the Agent Framework. It elaborates on key framework concepts such as using external tools within agents and asynchronous workflows for enhanced user interactivity. Developers transitioning from frameworks such as AutoGen or Semantic Kernel should study this example to understand leveraging Azure AI services within their projects.",
      "tags": [
        "agent",
        "azure",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "azure_ai_with_bing_grounding",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_bing_grounding.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_bing_grounding.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of an Azure AI agent employing Bing Grounding search to fetch real-time web information. It illustrates integrating the HostedWebSearchTool and AzureAIAgentClient within an asynchronous context manager, promoting efficient resource handling and response synthesis. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will benefit from learning structured tool integration and real-time data incorporation for responsive AI solutions.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to leverage Azure AI Agents to execute Python code using the HostedCodeInterpreterTool for tasks like mathematical computations and code generation. It introduces key concepts of integrating Azure AI with asynchronous workflows and demonstrates building interactive agents capable of interpreting and running code. Developers migrating from frameworks such as Semantic Kernel, LangChain, and AutoGen can reference this to understand implementing advanced tools and capabilities.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_existing_agent",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a guide for integrating pre-existing Azure AI Agents into applications using Agent Framework, focusing on production agent reuse and implementing custom instructions. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can refer to this example to understand setting up agent clients and deploying adaptable instructions for enhanced interactions.",
      "tags": [
        "agent",
        "azure_integration",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_existing_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_thread.py",
      "language": "python",
      "processed": true,
      "description": "This code demonstrates the usage of Azure AI services combined with Agent Framework to handle pre-existing conversation threads, showcasing how to interact programmatically with thread management. It covers creating and reusing threads for AI agent operations using tools and instructions, enabling efficient communication workflows. Developers familiar with frameworks like LangChain or Semantic Kernel should refer to this sample for insights into Azure AI's threading capabilities and integration patterns.",
      "tags": [
        "agent",
        "chat_client",
        "langchain_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Azure AI Agent using explicit configuration settings rather than environment variable defaults. It highlights key concepts such as asynchronous authentication utilizing Azure CLI Credentials, integration of tools for enhancing agent functionality, and practical usage of the ChatAgent framework for interactive tasks. Developers transitioning from frameworks like LangChain or Semantic Kernel will gain insights into leveraging the Agent Framework's structured approach for creating AI-powered applications.",
      "tags": [
        "agent",
        "azure_integration",
        "tools",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of an Azure AI agent integrated with file search capabilities. It showcases procedures for uploading documents, generating vector stores, and constructing agents equipped with hosted tools to answer user queries. Developers transitioning from other frameworks like Semantic Kernel or LangChain can benefit from understanding how to leverage Azure AI's functionalities to build such interactive experiences efficiently.",
      "tags": [
        "agent",
        "tools",
        "azure_ai_integration",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides practical examples of utilizing the Agent Framework with Azure AI integration and function tools. It demonstrates both agent-level and query-level configurations for tool utilization, such as fetching weather information or the current UTC time. Developers transitioning from frameworks like LangChain will find this valuable for understanding tool-based query customization.",
      "tags": [
        "agents",
        "tools",
        "azure_integration",
        "beginner"
      ]
    },
    {
      "name": "azure_ai_with_hosted_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a detailed implementation for integrating Azure AI Agents utilizing the Hosted Model Context Protocol (MCP), including user-approval workflows for secure function calls. It explores the interaction between hosted tools within the agent framework and effective management of function triggers. Developers migrating from frameworks such as AutoGen or Semantic Kernel will gain insights into implementing secure, interactive AI workflows within Azure environments.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of Azure AI Agents with local Model Context Protocol (MCP) servers, highlighting usage patterns for both agent-level and run-level tool configurations. It emphasizes concepts such as asynchronous Azure credentials, interaction with MCP servers, and the use of tools in the Agent Framework. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain would find this guide valuable for understanding how to implement Azure AI-based solutions using advanced agent paradigms.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_multiple_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_multiple_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_multiple_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of multiple tools with Azure AI agents using the Agent Framework. It illustrates workflows for handling user function approval and enabling Azure AI observability, showcasing tools such as Hosted MCP and Web Search. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this example to understand multi-tool integration and human-in-loop workflows.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "human_in_loop"
      ]
    },
    {
      "name": "azure_ai_with_openapi_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_openapi_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_openapi_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates creating an Azure AI-powered ChatAgent utilizing OpenAPI tools for answering user queries related to weather and country details. It includes loading OpenAPI specifications, configuring OpenApiTool instances, and interacting with the agent in asynchronous contexts, showcasing robust tool integration and asynchronous resource management. Developers transitioning from LangChain or AutoGen frameworks should reference this for concepts on multi-tool integration and asynchronous agent deployment.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This code sample showcases the integration of Azure AI services with an agent framework, emphasizing thread management techniques for context persistence. Developers transitioning from frameworks like Semantic Kernel or LangChain will find this version noteworthy for its clear delineation of automatic versus persistent thread approaches and will gain insight into enhancing agent interaction patterns.",
      "tags": [
        "agent",
        "azure_ai",
        "thread_management",
        "advanced"
      ]
    },
    {
      "name": "azure_assistants_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the utilization of the Azure OpenAI Assistants Client for implementing basic agent-based interactions, covering automatic assistant lifecycle management, and demonstrating streaming and non-streaming response generation. It serves as an essential reference for developers transitioning from frameworks like AutoGen or LangChain who seek to understand agent creation and tooling integration within the Azure ecosystem.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the use of the Agent Framework to integrate Azure OpenAI Assistants with a Hosted Code Interpreter tool for executing Python code and solving mathematical queries. Key concepts covered include streaming data with agents and utilizing tools for dynamic code execution. Developers transitioning from frameworks such as AutoGen or Semantic Kernel can leverage this example to understand integration of code interpreters in dynamic assistant interactions.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate and interact with existing Azure OpenAI Assistant instances using the Agent Framework. It showcases creating persistent assistant instances and utilizing them with an OpenAI chat client for tasks such as weather querying. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand the implementation of agent workflows with Azure-specific tools.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "azure_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates the initialization and usage of the Azure OpenAI Assistants Client with explicit configuration settings, bypassing reliance on default environment variables. Developers can leverage this example to understand how to integrate Azure authentication and utilize assistants for tool-based tasks, such as weather retrieval. Migrating developers from frameworks like AutoGen or Semantic Kernel can benefit by learning the explicit configuration approach for improved control and clarity.",
      "tags": [
        "agent",
        "tools",
        "azure_openai",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This example demonstrates the usage of Azure OpenAI Assistants integrated with custom function tools within the Agent Framework. It covers agent-level tool initialization as well as dynamic query-level tools setup, emphasizing flexibility and modularity in tool management. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this sample beneficial for understanding tool integration and management in conversational agent applications using Azure services.",
      "tags": [
        "agent",
        "tools",
        "langchain_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_assistants_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of thread management within agents using the Azure OpenAI Assistants framework. It demonstrates the creation of automatic threads, maintained thread context, and the continuation of contexts via explicit thread identifiers. Developers transitioning from frameworks like Semantic Kernel or LangChain can leverage this sample to understand structured thread usage for contextual agent interactions.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the AzureOpenAIChatClient within the Agent Framework for implementing chat-based interactions using streaming and non-streaming responses. It provides examples of setting up an agent with tool integration, authentication via Azure credentials, and handling user queries interactively. Developers migrating from frameworks like LangChain or Semantic Kernel will find this insight useful for adapting similar functionalities seamlessly.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "azure_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the setup and utilization of the `AzureOpenAIChatClient` from the Agent Framework to create a Chat Agent with explicitly defined configuration parameters. It provides practical insights into replacing environment-variable-based settings with custom explicit values, emphasizing flexibility in agent initialization. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this sample to adapt their workflow and improve configurability of Azure OpenAI integrations.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of functions as tools with an Azure OpenAI Chat Client using the Agent Framework library. It illustrates tool configurations both at the agent-creation level and dynamically at query execution, providing flexibility in tool utilization for varying user inquiries. Developers migrating from other frameworks like Semantic Kernel or LangChain can reference this sample to understand function-level tool integration and dynamic query handling.",
      "tags": [
        "agent",
        "tools",
        "azure_chat_client",
        "beginner"
      ]
    },
    {
      "name": "azure_chat_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of an Azure OpenAI Chat Client with agent thread management within the Agent Framework. Developers will learn how to manage automatic thread creation, maintain context and message history with persistent threads, and utilize existing messages across multiple agent instances. This guide is particularly useful for migrating from frameworks like Semantic Kernel, AutoGen, or LangChain, to understand persistent conversational context and thread-based architectures.",
      "tags": [
        "agent",
        "chat_client",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_responses_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample showcases the basic usage of the Azure OpenAI Responses Client for weather information generation, integrating streaming and non-streaming interaction styles. It demonstrates how to set up authentication, configure agents using tools, and retrieve structured responses seamlessly. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find it beneficial as it provides insight into the Azure Agent Framework's response handling mechanics.",
      "tags": [
        "agent",
        "streaming",
        "structured_output",
        "beginner"
      ]
    },
    {
      "name": "azure_responses_client_code_interpreter_files",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_code_interpreter_files.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_code_interpreter_files.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of the Azure OpenAI client in conjunction with a code interpreter tool to analyze data from uploaded files. It illustrates how agents can leverage hosted tools for processing structured data and performing complex analyses. Developers transitioning from frameworks like AutoGen or LangChain will find this example useful for implementing similar capabilities using Azure OpenAI and the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "azure_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the 'Azure Responses Client' within the Agent Framework to perform multimodal communication and image analysis. Developers are shown how to create an agent capable of responding to queries that involve both textual and image inputs by utilizing Azure OpenAI services. Those migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain will benefit from referencing this sample for understanding multimodal input handling and agent creation.",
      "tags": [
        "agent",
        "multimodal",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates leveraging the Agent Framework to interact with Azure OpenAI services to execute Python-based solutions for mathematical problems using the HostedCodeInterpreterTool. It explores the integration of chat clients with tool execution, showcasing an advanced scenario useful for frameworks supporting parallel or multimodal content generation. Developers transitioning from frameworks like LangChain, AutoGen, or Semantic Kernel will recognize comparable concepts implemented here.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This example illustrates how to create and configure an Azure OpenAI Responses Client explicitly, bypassing reliance on environment variables. The sample demonstrates agent-based interaction where custom functionalities such as generating weather insights are implemented. Developers moving from frameworks like AutoGen, Semantic Kernel, or LangChain should refer to this to understand explicit configuration and Azure-based integrations.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "azure_tools"
      ]
    },
    {
      "name": "azure_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample presents the integration of function tools with the Azure OpenAI Responses Client within the Agent Framework. It covers various tool configuration patterns, including at the agent level and query level, showcasing flexibility in tool usage. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand advanced tool integration in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Azure OpenAI Responses Client-based agent that integrates with local Model Context Protocol (MCP) servers for enhanced querying capabilities. It showcases establishing connections using Azure CLI credentials, creating agents with customized instructions, and leveraging MCP tools for dynamic and iterative question-answering scenarios. Ideal for developers migrating from frameworks like AutoGen or Semantic Kernel, the sample highlights advanced integration patterns that facilitate seamless workflows and improved data interaction.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_responses_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates the utilization of the Azure OpenAI Responses Client within a threading paradigm alongside the Agent Framework. It demonstrates automatic thread creation, in-memory thread persistence, and server-stored thread ID reuse to maintain conversation context across queries. Developers migrating from other conversational frameworks, such as Semantic Kernel or LangChain, will find this sample beneficial for transitioning to Azure-specific threading and persistent conversation approaches.",
      "tags": [
        "agent",
        "azure_openai",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "copilotstudio_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the fundamental usage of the CopilotStudioAgent framework for creating conversational agents configured via environment variables. It includes examples of handling both streaming and non-streaming responses, providing insights into asynchronous data processing for agent communication. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain may utilize this example to understand basic operations and initialize agents using CopilotStudioAgent effectively.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "copilotstudio_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the setup and usage of the CopilotStudioAgent within a Python application, emphasizing explicit configuration for token handling and connection settings. It displays how to establish an agent instance with defined settings, such as environment identifiers, authentication details, and operational parameters, for robust deployment. Developers transitioning from other frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this example to understand explicit configurations and integration nuances.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "custom_agent",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\custom_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\custom_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the implementation of a custom agent within the Agent Framework, specifically by extending the BaseAgent class. Key concepts include handling both streaming and non-streaming messages, and normalizing inputs for effective processing. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can use this as a foundational guide to understand agent customization in the Agent Framework.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "custom_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\custom_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\custom_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates creating a custom chat client by extending the BaseChatClient class within the Agent Framework. It illustrates key concepts such as middleware usage, function invocation, handling streaming responses, and integrating the custom client into an agent for enhanced conversational capabilities. Developers migrating from frameworks like LangChain, AutoGen, or Semantic Kernel can use this sample to understand implementing custom logic and middleware integration.",
      "tags": [
        "agents",
        "chat_client",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "ollama_with_openai_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\ollama\\ollama_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\ollama\\ollama_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of Ollama models with the OpenAI Chat Client for creating agents capable of local language model inferencing. It covers both non-streaming and streaming interaction methods and utilizes tools based on annotated Python functions. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain can refer to this example to understand effective interoperation of local inference capabilities and agent functionalities.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_assistants_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the foundational use of the Agent Framework's OpenAIAssistantsClient for building agents capable of providing conversational AI services in streaming and non-streaming modes. It explains the lifecycle management and interaction with tools, making it invaluable for developers migrating from frameworks like Semantic Kernel, Autogen, or LangChain aiming for leveraging structured assistant capabilities with integrated tool support.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "openai_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of OpenAI Assistants with the HostedCodeInterpreterTool to execute Python code for mathematical problem solving. Key concepts include handling agent-streaming responses and extracting specific tool-executed code results. Developers migrating from Semantic Kernel, AutoGen, or LangChain frameworks will find this example valuable for reimplementing similar computation functionalities using the Agent Framework.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of OpenAI Assistants using pre-existing assistant IDs, showcasing how to configure and use customizable agents within the Agent Framework. It covers setting up an Assistant Client, handling persistent assistant instances, and defining task-oriented tools leveraging frameworks like OpenAI Assistants Client and Pydantic typing annotations. Developers migrating from platforms like LangChain or Semantic Kernel can use this guide to adapt their implementations to the Agent Framework flow.",
      "tags": [
        "agent",
        "chat_client",
        "langchain_migration",
        "beginner"
      ]
    },
    {
      "name": "openai_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates initializing and operating OpenAI-based Assistant agents with explicit configuration settings using the Agent Framework. It provides an example of defining custom tools such as weather lookup functionalities and setting up agents with targeted instructions for domain-specific operations. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand the explicit configuration approach for agent instantiation and tool integration.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_assistants_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates leveraging an OpenAI Assistants Client along with a Hosted File Search Tool from the Agent Framework. It showcases document-based question answering within a knowledge base created using vector stores and highlights streaming interactions using structured text responses. Developers migrating from frameworks like Semantic Kernel or LangChain should utilize this sample to understand implementing knowledge-base tools in conjunction with OpenAI-powered conversational agents.",
      "tags": [
        "agent",
        "intermediate",
        "tools",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of function tools with the OpenAI Assistants framework, illustrating both agent-level and query-level tool configurations. It showcases practical usage and implementation patterns such as defining tools at agent initialization, selectively passing tools during execution, and combining these approaches for enhanced flexibility. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample helpful for understanding tool management strategies using the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python code example demonstrates the use of the Agent Framework for managing conversations and preserving context through threads and an OpenAI Assistants Client. It covers fundamental concepts like thread creation, persistence, and usage across sessions. Developers migrating from frameworks like AutoGen or Semantic Kernel can utilize this guide to understand context management and improve their conversational AI setups.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "workflow"
      ]
    },
    {
      "name": "openai_chat_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the basic usage of the OpenAIChatClient interface within the Agent Framework for handling chat-based interactions. It covers the implementation of both streaming and non-streaming response patterns, showcasing how agents can dynamically interact using predefined toolsets. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this to understand the paradigm for managing chat operations effectively using OpenAI agents.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the creation and configuration of an OpenAI Chat Client within the Agent Framework, explicitly setting parameters for the chat model and API key. Developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain can reference this example to understand explicit agent initialization and tool integration.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of function-based tools with the OpenAI Chat Client within the Agent Framework, showcasing different patterns for tool configuration at both setup and runtime levels. It introduces key concepts such as tool usage within agents, tool configuration strategies, and mixed tool scenarios, making it relevant for developers migrating applications from frameworks like AutoGen, Semantic Kernel, or LangChain.",
      "tags": [
        "agent",
        "tools",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "openai_chat_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of OpenAI's Chat Client with local MCP tools to create a versatile and interactive agent using the Agent Framework. Key concepts covered include defining tools at different operational levels and seamless incorporation of external service functionalities into agent operations. Developers migrating from frameworks such as LangChain, Semantic Kernel, or AutoGen should reference this guide to understand structured agent-tool collaboration in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of thread management within the OpenAI Chat Client integrated into the Agent Framework. It showcases scenarios such as automatic thread creation, maintaining thread persistence for conversation history, and utilizing existing messages to manage threads effectively. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can benefit from understanding these concepts to efficiently manage thread contexts and enhance chatbot functionality.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_chat_client_with_web_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a client using the OpenAI Chat model integrated with a web search tool, allowing for dynamic information gathering and enhanced response accuracy. It effectively showcases leveraging external tools for expanded capability in agent frameworks and provides an example for migrations from systems such as Semantic Kernel, AutoGen, or LangChain.",
      "tags": [
        "agent",
        "tools",
        "langchain_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the implementation of a basic weather agent utilizing the OpenAIResponsesClient from the Agent Framework. It demonstrates streaming and non-streaming response generation and integration with tools for structured output. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand agent setup and response handling.",
      "tags": [
        "agent",
        "openai",
        "streaming",
        "beginner"
      ]
    },
    {
      "name": "openai_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates leveraging the OpenAI Responses Client within the Agent Framework for performing multimodal content analysis, particularly integration of text dialogue and image processing capabilities. It is suited for developers exploring the Agent Framework features for handling complex interaction subjects involving visual and textual data, and transitioning from frameworks such as AutoGen or Semantic Kernel by showcasing advanced multimodal capabilities.",
      "tags": [
        "agent",
        "multimodal",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_image_generation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_generation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_generation.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the utilization of the Agent Framework's OpenAIResponsesClient to facilitate image generation using OpenAI's DALL-E model. Key concepts covered include constructing agents with specified parameters for creative visual generation tasks and parsing their responses. Developers transitioning from frameworks such as Semantic Kernel or LangChain should reference this sample to understand image-based multimodal capabilities.",
      "tags": [
        "agent",
        "tools",
        "multimodal",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_reasoning",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_reasoning.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_reasoning.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates advanced reasoning and problem-solving capabilities using OpenAI's GPT-5 model within the Agent Framework. It provides examples of streaming and asynchronous responses, enabling visualization of reasoning steps and effective utilization of API-specific options for enhanced interaction. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should reference this sample to leverage API-specific features for complex tasks.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "openai_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the `HostedCodeInterpreterTool` in conjunction with the `OpenAIResponsesClient` to execute Python code dynamically and solve advanced mathematical problems within a conversational agent environment. It showcases the integration of tool utilization within the Agent Framework, emphasizing structured response handling and procedural code execution. Developers migrating from frameworks like Semantic Kernel or LangChain may reference this example to understand effective tool binding and response processing techniques for enhanced developer productivity.",
      "tags": [
        "agent",
        "tools",
        "advanced",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_code_interpreter_files",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter_files.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter_files.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates employing the Agent Framework to utilize OpenAI\u2019s Responses Client paired with the HostedCodeInterpreterTool for analyzing uploaded files using Python code. It covers capabilities including file management via OpenAI APIs, interactive query handling, and integration of tools for enhanced functionality within agents. Developers migrating from LangChain or Semantic Kernel can reference this to understand implementation methods for orchestrating structured analysis workflows with third-party integrations.",
      "tags": [
        "agent",
        "intermediate",
        "tools",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the use of the OpenAI Responses Client from the Agent Framework to initiate an agent with explicit settings. It includes creating an agent utilizing custom tools, defining instructions, and configuring the environment manually rather than relying on defaults, making it ideal for scenarios requiring precise customization. Developers migrating from Semantic Kernel, AutoGen, or LangChain will find this sample useful for understanding explicit configuration and integration within the framework.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of OpenAI Responses Client with the HostedFileSearchTool for contextual information retrieval from document-based knowledge resources. Developers migrating from semantic kernel, AutoGen, or LangChain frameworks can leverage this sample to understand how to implement document property-based information searching within asynchronous workflows for enhanced agent capabilities.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the use of the OpenAI Responses Client within the Agent Framework to integrate function tools at both agent creation and query execution levels. It highlights methods for tool configuration, supporting dynamic and static tool assignments for enhanced interaction capabilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this example to understand new paradigms in tool usage and query execution.",
      "tags": [
        "agent",
        "tools",
        "chat_client",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_with_hosted_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample showcases how to integrate hosted Model Context Protocol (MCP) tools with the OpenAI Responses Client within the Agent Framework. It covers concepts such as user approval workflows for function call security and different methods (threaded and non-threaded) to handle approvals effectively. Developers migrating from frameworks like LangChain or Semantic Kernel should refer to this example for insights into combining hosted tools with LLM-driven workflows for secured interaction models.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the OpenAIResponsesClient and the MCPStreamableHTTPTool within the Agent Framework to create a responsive agent capable of utilizing external API tools like Microsoft's Model Context Protocol (MCP). It is ideal for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain to learn how to utilize tool-based enhancement of model capabilities.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_structured_output",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_structured_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_structured_output.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates how to utilize the OpenAIResponsesClient from the Agent Framework to implement structured information retrieval using Pydantic models for type-safe response parsing. The sample includes detailed examples for both streaming and non-streaming queries, making it relevant for developers migrating from frameworks such as LangChain or Semantic Kernel who wish to integrate advanced structured output capabilities into their workflows.",
      "tags": [
        "agent",
        "structured_output",
        "streaming",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the usage of the OpenAIResponsesClient for interacting with OpenAI API combined with thread management techniques provided by the Agent Framework. It covers methods for automatic thread creation, thread persistence, and reusing threads with existing IDs, showcasing capabilities for maintaining conversation state across sessions. Developers migrating from frameworks like AutoGen or LangChain can use this as a reference for leveraging conversation threading and active context features.",
      "tags": [
        "agent",
        "thread_management",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_web_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of the OpenAIResponsesClient integrated with HostedWebSearchTool within the Agent Framework context, illustrating how to enable retrieval and utilization of real-time external data sources. The presented architecture showcases streaming and batch response handling for tools providing enhanced capabilities, suitable for developers transitioning from environments like Semantic Kernel and LangChain seeking similar integrations.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "langchain_migration"
      ]
    },
    {
      "name": "mem0_basic",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_basic.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the usage of the Mem0 context provider integrated within the Agent Framework to retain and utilize memory contextful interactions with an Azure AI-powered agent. Specifically, it showcases how user preferences can be maintained across separate conversation threads using Mem0's memory capabilities. Developers familiar with frameworks like AutoGen, Semantic Kernel, or LangChain aiming to implement memory-based user contexts efficiently will find this example particularly insightful.",
      "tags": [
        "agent",
        "context_providers",
        "autogen_migration",
        "human_in_loop"
      ]
    },
    {
      "name": "mem0_oss",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_oss.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_oss.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample illustrates the utilization of the Mem0 OSS context provider within the Agent Framework. It demonstrates setting up an agent with Azure authentication and context memory to enhance the understanding of user-specific settings across multiple conversation threads. Developers migrating from frameworks such as Semantic Kernel or AutoGen will benefit from observing the implementation of contextual memory to maintain user preferences.",
      "tags": [
        "agent",
        "context_providers",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "mem0_threads",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_threads.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the usage of the Agent Framework with Mem0Provider for handling memory contexts using thread-specific or global configurations. It provides examples of integrating Azure CLI credentials with the Azure AI Agent Client and explores memory scopes that facilitate flexible user context management within conversations. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this sample to understand advanced memory management concepts for conversation persistence and inter-agent communication.",
      "tags": [
        "agent",
        "intermediate",
        "context_management",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "redis_basics",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the usage of Redis as a context provider within the Agent Framework ecosystem, focusing on persisting and retrieving conversational memory. It demonstrates foundational concepts such as provider integration with agents, enabling tool outputs storage, and leveraging Redis features like vector search. Developers transitioning from platforms like AutoGen, Semantic Kernel, or LangChain will find the outlined techniques valuable for adopting Redis-driven contextual memory in their projects.",
      "tags": [
        "agent",
        "redis",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "redis_conversation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_conversation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_conversation.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of Redis as a context provider with the Agent Framework to enhance conversational capabilities. It illustrates how Redis can be utilized to persist and retrieve conversational data, allowing for memory persistence and contextual responses in agent interactions. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can use this to understand upgrading their systems to leverage Redis for contextual data management.",
      "tags": [
        "agent",
        "langchain_migration",
        "context_management",
        "intermediate"
      ]
    },
    {
      "name": "redis_threads",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_threads.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates how to use Redis-based context providers within the Agent Framework for conversational memory scoping. It provides examples on configuring global, per-operation thread, and agent-isolated memory scopes, enabling developers to manage contextual memory effectively. Useful for developers migrating from Semantic Kernel or Langchain who require robust multi-threaded memory handling.",
      "tags": [
        "agent",
        "redis",
        "advanced",
        "langchain_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\fanout_workflow\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\fanout_workflow\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates creating a sophisticated fan-in/fan-out data processing workflow utilizing the Agent Framework. It covers key concepts such as executing tasks in parallel, conditional processing, and managing complex workflows using handlers and data models. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand advanced workflow orchestration practices.",
      "tags": [
        "workflow",
        "intermediate",
        "fan_out",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\foundry_agent\\agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\foundry_agent\\agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation of a weather assistant agent with the Agent Framework's Debug UI utilizing Azure AI Foundry capabilities. It showcases fundamental concepts such as tool integration, Azure CLI authentication, and using the Agent Framework's development interface for running and interacting with agents in real-time. Developers migrating from frameworks like Semantic Kernel, LangChain, or AutoGen can reference this sample for implementing environment-specific tool integration and leveraging Azure services.",
      "tags": [
        "agent",
        "beginner",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\spam_workflow\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\spam_workflow\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample expertly illustrates the implementation of a spam detection workflow using the Agent Framework. It highlights advanced workflow concepts, such as complex branching and asynchronous processing, and demonstrates how to structure and analyze email content for spam identification. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this useful for understanding dynamic workflows and enhancing email processing capabilities.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\weather_agent_azure\\agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\weather_agent_azure\\agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides a hands-on demonstration of creating and deploying a weather-related conversational agent using the Agent Framework and Debug UI. It showcases middleware integration for customizing request handling and logic, tools implementation for weather data provision, and server deployment for hosting the chatbot locally. Developers migrating from frameworks like Semantic Kernel or LangChain can explore this sample for insights into utilizing modern middleware patterns and Azure OpenAI integration effectively.",
      "tags": [
        "agent",
        "middleware",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\workflow_agents\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\workflow_agents\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of an agent-driven workflow leveraging the Agent Framework's branching and convergence capabilities to create and evaluate content. It showcases concepts such as conditional routing based on structured outputs, agent role specialization, and workflow orchestration through the WorkflowBuilder. Developers migrating from frameworks like AutoGen or LangChain will find this example a compelling guide when transitioning complex workflows to this new framework.",
      "tags": [
        "agent",
        "workflow",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "red_team_agent_sample",
      "category": "evaluation",
      "file_path": "python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\red_team_agent_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\red_team_agent_sample.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of the Azure AI Framework with advanced evaluation tools for assessing the resilience and safety of agent systems against adversarial queries. It focuses on utilizing Azure AI's RedTeam methodology to perform comprehensive risk assessments, supporting objectives like violence, fairness, and self-harm risk categories. Developers transitioning from other frameworks such as Semantic Kernel or AutoGen can leverage this example to understand adaptive approaches enhancing their agents' robustness.",
      "tags": [
        "evaluation",
        "azure_ai_foundry",
        "agent",
        "advanced"
      ]
    },
    {
      "name": "azure_ai_agents_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_ai_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_ai_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the use of Azure AI agents within a streaming-enabled workflow built using the Agent Framework. It incorporates agents directly into a WorkflowBuilder pipeline, showcasing incremental updates via streaming with the run_stream method. Developers transitioning from frameworks like Semantic Kernel or LangChain can leverage this example to understand how Azure AI agents enable dynamic and observable data exchanges in workflows.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_chat_agents_function_bridge",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_function_bridge.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_function_bridge.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of Azure Chat Agents within an integrated pipeline utilizing function bridges for streamlined workflow execution. It showcases creating two connected agents that collaborate to enhance and refine user-input-driven outputs by leveraging external reference sources. Developers migrating from frameworks like Semantic Kernel, Autogen, or LangChain will find this approach valuable for implementing advanced multistep agent workflows using Azure-specific tools.",
      "tags": [
        "agent",
        "workflow",
        "azure_integration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_chat_agents_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integrating Azure OpenAI chat agents into workflows that leverage streaming mechanisms. It showcases the creation of an organized pipeline using the Agent Framework, employing two distinct agents: a Writer for content generation and a Reviewer for critique and feedback. Developers migrating from frameworks like Semantic Kernel or LangChain can use this sample to understand effective use of workflows and streaming updates in the Agent Framework.",
      "tags": [
        "workflow",
        "streaming",
        "agent",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_chat_agents_tool_calls_with_feedback",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_tool_calls_with_feedback.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_tool_calls_with_feedback.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates a structured workflow using the Agent Framework to implement tool-enabled agents paired with human feedback loops. It features integrated Azure OpenAI Chat and demonstrates attaching Python function tools, handling feedback events, and streaming updates with pause points. Developers migrating from frameworks like AutoGen or LangChain can use this as a guide to implement human-in-the-loop agent systems efficiently.",
      "tags": [
        "workflow",
        "agent",
        "tools",
        "human_in_loop"
      ]
    },
    {
      "name": "concurrent_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\concurrent_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\concurrent_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to construct a concurrent workflow in the Agent Framework using `ConcurrentBuilder` and expose this workflow as a reusable agent. It provides examples of fan-out/fan-in orchestration, role-specific agent activities, and aggregation of results. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this useful for understanding multi-agent parallel workflows and integration techniques.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "parallel"
      ]
    },
    {
      "name": "custom_agent_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the creation of workflows featuring custom agent executors using the Agent Framework. It introduces core concepts such as WorkflowBuilder for fluent chaining, typed WorkflowContexts for input-output handling, and Executor nodes for agent encapsulation within workflows. Developers transitioning from other frameworks like Semantic Kernel or LangChain will benefit from understanding structured agent collaboration and workflow integration.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "group_chat_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\group_chat_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\group_chat_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the orchestration of a group chat workflow using the Agent Framework. It highlights concepts like synchronous collaboration between specialized agents coordinated by a manager and practical implementation using OpenAI-based language models. Developers familiar with frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this example to learn coordinated agent interactions transitioning into structured workflows with concise task-oriented outputs.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "structured_output"
      ]
    },
    {
      "name": "magentic_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\magentic_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\magentic_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to create and use a Magentic workflow as an agent within the Agent Framework. It showcases the integration of tools and streaming callbacks, facilitating seamless communication and computation between agents specialized for distinct tasks (e.g., research and coding). Developers migrating from other frameworks like LangChain or Semantic Kernel will find this useful as it offers advanced orchestration and streaming support, suitable for complex workflows.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "advanced"
      ]
    },
    {
      "name": "sequential_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\sequential_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\sequential_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to construct a sequential workflow for AI agents using the Agent Framework and treat the workflow itself as an agent for further invocations. It explores the creation of basic agents, the assembly of workflows, and their orchestration, highlighting step-by-step procedures relevant to Azure OpenAI integration. Developers migrating from frameworks such as LangChain or Semantic Kernel will find this example valuable for understanding workflow encapsulation as agent-level entities.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "workflow_as_agent_human_in_the_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of a Workflow Agent integrating a Human-in-the-Loop mechanism using the Agent Framework. Key concepts include refinement and escalation processes where an automated system involves human input when encountering uncertain decisions, demonstrating practical applications of WorkflowBuilder and message handling components. Developers transitioning from frameworks like AutoGen or Semantic Kernel will find this example invaluable for understanding human-assisted workflow patterns.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "workflow_as_agent_reflection_pattern",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_reflection_pattern.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_reflection_pattern.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing a cyclic workflow as an agent using the reflection and retry pattern. Key concepts include the WorkflowAgent for connecting workflows to external consumers, structured review and feedback management using Pydantic, and iterative responses refinement through Worker and Reviewer executors. Developers transitioning from other frameworks like Semantic Kernel or AutoGen will find practical insights into designing adaptive workflows and embedding feedback loops.",
      "tags": [
        "workflow",
        "agent",
        "reflection",
        "structured_output"
      ]
    },
    {
      "name": "checkpoint_with_human_in_the_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample showcases a 'Checkpoint + Human-in-the-Loop' workflow using the Agent Framework. It demonstrates a structured process for creating AI-generated content with human intervention and checkpointing for persistence and state restoration. Developers transitioning from frameworks like Semantic Kernel or LangChain will find useful patterns for integrating human-in-the-loop decision-points and efficient checkpoint management mechanisms.",
      "tags": [
        "agent",
        "workflow",
        "checkpoint",
        "human_in_loop"
      ]
    },
    {
      "name": "checkpoint_with_resume",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_resume.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_resume.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an advanced workflow implementation using the Agent Framework to demonstrate creating checkpoints and resuming execution from a specific state. Through a text-processing pipeline, key operations such as persisting executor state, shared state management, and inspection of checkpoints programmatically are covered. Developers migrating from similar frameworks like LangChain would use this guide to understand workflow execution and state resumption efficiently.",
      "tags": [
        "workflow",
        "checkpoint",
        "langchain_migration",
        "advanced"
      ]
    },
    {
      "name": "sub_workflow_checkpoint",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\sub_workflow_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\sub_workflow_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a parent workflow encompassing sub-workflows with checkpointing capabilities, which enable persistence and resumption of workflow states incorporating human decisions. It exercises workflow constructs such as WorkflowExecutor, message handling, and nested workflow interactions, making it a comprehensive example of modular workflow design. Developers migrating from frameworks like LangChain or Semantic Kernel can use this sample to understand advanced workflow features and human-in-loop patterns.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "advanced"
      ]
    },
    {
      "name": "sub_workflow_basics",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an illustrative example of creating and orchestrating sub-workflows using the Agent Framework. It demonstrates how parent workflows can invoke sub-workflows to process tasks and efficiently collect results, showcasing concepts such as Workflow Executors, event handling, and modular task processing. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this guide helpful for implementing structured and scalable task execution patterns.",
      "tags": [
        "workflow",
        "structured_output",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "sub_workflow_parallel_requests",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_parallel_requests.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_parallel_requests.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates a sub-workflow design applying parallel request handling within the Agent Framework, showcasing the distribution of resource allocation and policy verification tasks among specialized interceptors. It provides insights into using typed message routing and handler methods for categorizing and processing requests. Developers exploring sophisticated workflow compositions or migrating from frameworks like Semantic Kernel or LangChain can leverage this example to streamline their distributed system designs.",
      "tags": [
        "workflow",
        "parallel",
        "agent",
        "structured_output"
      ]
    },
    {
      "name": "sub_workflow_request_interception",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_request_interception.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_request_interception.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the creation and execution of sub-workflows using the Agent Framework, with the capability of intercepting and handling requests dynamically for efficiency. It highlights features like request-response correlation, concurrent processing, and external request routing for scenarios such as an email domain validation system. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand workflow composition and interception fundamentals.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "parallel"
      ]
    },
    {
      "name": "edge_condition",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\edge_condition.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\edge_condition.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates implementing conditional routing using the Agent Framework within a workflow scenario, focusing on structured output management and edge condition evaluation. Developers migrating from LangChain or Semantic Kernel can leverage its design principles to create robust workflows using boolean predicates for data-driven decision making.",
      "tags": [
        "workflow",
        "intermediate",
        "structured_output",
        "langchain_migration"
      ]
    },
    {
      "name": "multi_selection_edge_group",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\multi_selection_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\multi_selection_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the construction and execution of a multi-branch workflow using the Agent Framework. It demonstrates advanced concepts such as multi-selection edge groups, shared state management, and Pydantic model validation for ensuring robust data exchange. Developers migrating from frameworks like Semantic Kernel or AutoGen can reference this guide to understand dynamic workflow branching and state-sharing patterns.",
      "tags": [
        "workflow",
        "advanced",
        "agent",
        "fan_out"
      ]
    },
    {
      "name": "sequential_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\sequential_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\sequential_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to construct and execute a sequential workflow using custom executor classes within the Agent Framework or similar environments. It illustrates key concepts such as using specific methods to process outputs, sending intermediate results between executors, and yielding final outputs, with real-time streaming of workflow events. Developers can benefit from consulting this sample when migrating from frameworks like Semantic Kernel or LangChain to understand structured workflow orchestration.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "sequential_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\sequential_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\sequential_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a sequential workflow with streaming using the Agent Framework. It features key concepts such as executor methods, workflow construction, intermediate message passing, and final output yielding. Developers migrating from frameworks like LangChain, Semantic Kernel, or AutoGen can use this sample to grasp efficient execution patterns and real-time observability within modern agent workflows.",
      "tags": [
        "workflow",
        "streaming",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "simple_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\simple_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\simple_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates creating and executing a workflow featuring iterative feedback loops within Microsoft Agent Framework. It implements a binary search process to guess a predefined number, utilizing agents to evaluate and return guidance for refining inputs. Developers migrating from other frameworks such as Semantic Kernel or LangChain can refer to this sample to understand loop-construction workflows and interplay among multiple executors.",
      "tags": [
        "workflow",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "switch_case_edge_group",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\switch_case_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\switch_case_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates creating a decision-making workflow using the Agent Framework's switch-case edge group functionality. It demonstrates integration with Azure OpenAI chat models to classify emails into categories such as 'Spam', 'NotSpam', or 'Uncertain' and routing them based on structured outputs obtained via Pydantic. Developers transitioning from frameworks like Semantic Kernel or LangChain can benefit from this example as it emphasizes structured state usage and robust JSON validation in workflows.",
      "tags": [
        "workflow",
        "advanced",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "guessing_game_with_human_input",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\human-in-the-loop\\guessing_game_with_human_input.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\human-in-the-loop\\guessing_game_with_human_input.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates a human-in-the-loop guessing game workflow using the Agent Framework. Key concepts include integrating human feedback in AI-driven workflows with typed payloads and correlating request-response objects. Developers migrating from frameworks like Semantic Kernel or AutoGen should use this sample to understand event-driven execution and structured output handling.",
      "tags": [
        "workflow",
        "human_in_loop",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "tracing_basics",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\observability\\tracing_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\observability\\tracing_basics.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the basic usage of tracing and observability within workflows using the Agent Framework. It illustrates concepts such as setting up diagnostic tools and spans for workflow and executor states using OpenTelemetry. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to understand tracing and monitoring implementation within Agent Framework.",
      "tags": [
        "agent",
        "observability",
        "workflow",
        "intermediate"
      ]
    },
    {
      "name": "concurrent_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a concurrent fan-out/fan-in workflow using the Agent Framework. It shows how to utilize multiple domain-specific agents, orchestrated with a ConcurrentBuilder, to process and aggregate results for a given user prompt. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand parallel processing and aggregation concepts for enhanced workflows.",
      "tags": [
        "workflow",
        "parallel",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_custom_agent_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a concurrent workflow utilizing custom Agent Executors within the Agent Framework. It highlights concepts such as executor initialization, message handling with the Handler decorator, and the ConcurrentBuilder API for orchestration. Developers migrating from frameworks like AutoGen or Semantic Kernel should reference this guide to understand concurrent task execution and aggregation patterns.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "fan_out"
      ]
    },
    {
      "name": "concurrent_custom_aggregator",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_aggregator.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_aggregator.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases constructing a concurrent workflow using the Agent Framework's ConcurrentBuilder class with customized aggregation logic. It demonstrates how to fan-out prompts to multiple specialized agents and use a custom aggregator callback, built around Azure OpenAI's capabilities, to synthesize consolidated outputs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example when implementing complex collaborative agent-based workflows with customized summarization logic.",
      "tags": [
        "workflow",
        "intermediate",
        "fan_out",
        "autogen_migration"
      ]
    },
    {
      "name": "group_chat_prompt_based_manager",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\group_chat_prompt_based_manager.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\group_chat_prompt_based_manager.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of a group chat management workflow using the 'Agent Framework'. It showcases the coordination between specialized agents (Researcher and Writer) guided by a prompt-based manager to collaboratively solve a task. Developers transitioning from or integrating with frameworks like Semantic Kernel, AutoGen, or LangChain will find this example useful to understand advanced orchestration patterns.",
      "tags": [
        "workflow",
        "agent",
        "chat",
        "autogen_migration"
      ]
    },
    {
      "name": "group_chat_simple_selector",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\group_chat_simple_selector.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\group_chat_simple_selector.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a simple group chat workflow using the Agent Framework. It highlights the use of a custom speaker selection function that alternates participants based on the state of the conversation, showcasing a round-robin pattern. Developers transitioning from frameworks such as AutoGen or Semantic Kernel can reference this to understand a structured approach to controlling participant dialogue in collaborative tasks.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "handoff_simple",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\handoff_simple.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\handoff_simple.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a simple handoff workflow in the Agent Framework, utilizing a triage agent to route requests to domain-specific specialists. It highlights single-tier routing, automated handoff tool registration, and the user-agent interaction cycle. Developers migrating from frameworks like LangChain or Semantic Kernel can reference this for implementing basic triage mechanisms.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "handoff_specialist_to_specialist",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\handoff_specialist_to_specialist.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\handoff_specialist_to_specialist.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates a specialist-to-specialist multi-tiered handoff workflow utilizing the Agent Framework. It showcases advanced routing techniques for complex support scenarios, enabling seamless collaboration among specialized agents until the user query is fully resolved. Particularly beneficial for developers transitioning from Semantic Kernel, AutoGen, or LangChain due to its explicit routing and robustness.",
      "tags": [
        "workflow",
        "agent",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "magentic",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an advanced workflow integration example using the Agent Framework's Magentic orchestrator for coordinating multiple agents equipped with specialized capabilities, including ChatAgent execution and analysis via OpenAI tools. It highlights streaming callbacks, workflow configuration, and adaptable participant interactions, enabling developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain to harness these features for flexible task orchestration and inter-agent coordination.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "magentic_checkpoint",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of the Magentic orchestration framework with checkpointing mechanisms to manage paused workflows requiring human intervention for plan reviews. It showcases the principles of deterministic executor IDs, executor snapshotting, and resumption with stored responses, providing clarity and reliability in state persistence during workflow execution. Developers migrating from frameworks like Semantic Kernel or LangChain can utilize this example for implementing robust human-in-the-loop workflows.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "agent"
      ]
    },
    {
      "name": "magentic_human_plan_update",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic_human_plan_update.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic_human_plan_update.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a 'Magentic' workflow, incorporating human intervention via plan review before execution. Key concepts covered include the utilization of ChatAgent instances backed by OpenAI clients and the implementation of event-driven callbacks for streamlined processing. Developers migrating from frameworks such as AutoGen or Semantic Kernel can reference this example for integrating human-in-loop workflows effectively.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "sequential_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\sequential_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\sequential_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation of a sequential workflow focused on domain-specific agents using the Agent Framework. It showcases the integration of conversational agents with shared context and how their responses are aggregated into a coherent conversation. Developers transitioning from frameworks like Semantic Kernel or LangChain might reference this for insights into structured conversation orchestration.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "sequential_custom_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\sequential_custom_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\sequential_custom_executors.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a sequential workflow using the Agent Framework, combining agents and custom executors to process conversations. It introduces the SequentialBuilder for chaining participants with a shared conversation context, emphasizing extensibility with custom executors. Developers migrating from frameworks like Semantic Kernel or AutoGen can reference this to understand sequential orchestration techniques and integrating Azure OpenAI capabilities effectively.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "aggregate_results_of_different_types",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\aggregate_results_of_different_types.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\aggregate_results_of_different_types.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates constructing workflows with fan-out and fan-in patterns using the Agent Framework. It showcases parallel task execution with different output types, emphasizing Executor roles and tracing through event streams. Ideal for developers transitioning from Semantic Kernel or LangChain, offering insights into implementing structured workflows efficiently.",
      "tags": [
        "workflow",
        "fan_out",
        "parallel",
        "intermediate"
      ]
    },
    {
      "name": "fan_out_fan_in_edges",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\fan_out_fan_in_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\fan_out_fan_in_edges.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the construction of workflows incorporating parallel processing with the fan-out and fan-in pattern using the Agent Framework. It covers defining executors for dispatching prompts to domain-specific agents and consolidating their outputs through aggregation. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this for advanced workflow patterns involving concurrent execution and structured result aggregation.",
      "tags": [
        "workflow",
        "fan_out",
        "agent",
        "parallel"
      ]
    },
    {
      "name": "map_reduce_and_visualization",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\map_reduce_and_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\map_reduce_and_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a distributed map-reduce workflow for processing large text files using the Agent Framework. It covers key concepts such as executor design, state sharing, fan-out/fan-in parallelism, and the visualization of workflow graphs. Developers transitioning from frameworks like AutoGen or semantic kernel will find this example helpful for implementing efficient parallel data processing workflows.",
      "tags": [
        "workflow",
        "parallel",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "shared_states_with_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\state-management\\shared_states_with_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\state-management\\shared_states_with_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample highlights the use of shared state management with agents in workflow systems. It explores concepts such as decoupling payload handling, structured responses using Pydantic models, and conditional routing within workflows. Developers transitioning from frameworks like Semantic Kernel and LangChain should find this example instrumental as it demonstrates advanced state handling and structured workflow orchestration.",
      "tags": [
        "workflow",
        "advanced",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "concurrent_with_visualization",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\visualization\\concurrent_with_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\visualization\\concurrent_with_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates a concurrent fan-out and fan-in workflow using the Agent Framework. It showcases precise prompts dispatch to domain experts and aggregates their responses to produce structured insights, utilizing advanced capabilities like workflow visualization with GraphViz and Mermaid diagrams. Developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain will find this helpful for implementing collaborative multi-agent systems with visualization support.",
      "tags": [
        "workflow",
        "fan_out",
        "structured_output",
        "intermediate"
      ]
    },
    {
      "name": "step1_executors_and_edges",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step1_executors_and_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step1_executors_and_edges.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample introduces foundational constructs for designing workflows using the Agent Framework. It demonstrates the creation of executor nodes via class-based and function-based approaches, wiring of workflows with the Fluent WorkflowBuilder API, and execution semantics. Developers transitioning from frameworks like Semantic Kernel and LangChain can understand effective workflow structuring and contextual node operation paradigms in this framework.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "step2_agents_in_a_workflow",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step2_agents_in_a_workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step2_agents_in_a_workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates constructing and executing a workflow involving agents within the Agent Framework. A writer agent generates or edits content, and a reviewer agent evaluates and refines it. The sample showcases agent interaction using workflow features, making it a valuable reference for developers transitioning from frameworks like Semantic Kernel or LangChain.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "step3_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step3_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step3_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a streaming workflow using the Agent Framework, showcasing the integration of custom ChatAgent instances for content creation and review. It introduces the usage of WorkflowBuilder for setting up agents as executors and handling streaming events. Developers migrating from frameworks such as Semantic Kernel or LangChain can reference this sample for insights into constructing dynamic workflows using lifecycle and data-plane events.",
      "tags": [
        "workflow",
        "advanced",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides comprehensive documentation on utilizing the Agent Framework with various providers and tools to create advanced chat agents. It explains foundational concepts like function tools, code interaction, and structured outputs, making it essential for developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain. Ideal for intermediate to advanced users aiming to implement sophisticated agent-based architectures.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "structured_output"
      ]
    },
    {
      "name": "chat_client_documentation",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates usage of various chat clients within the Agent Framework, including implementations for Azure OpenAI models, Azure AI, and OpenAI models. It provides clear examples of how to configure and interact with these clients, making it an essential resource for developers migrating from frameworks like LangChain or AutoGen seeking to implement chat functionalities. Additionally, environment configuration details are provided to ensure seamless integration.",
      "tags": [
        "documentation",
        "chat_client",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "devui_documentation",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview and quick start guide for the DevUI component of the Agent Framework, highlighting its capabilities in interactive workflow and agent testing, directory-based discovery, and web interface usage. Migrating developers from frameworks like Semantic Kernel or LangChain can leverage this guide to efficiently transition, gain insight into supported entity structures, and experiment with OpenAI-compatible API endpoints.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "mcp_documentation",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an introduction to the Model Context Protocol (MCP) within the Agent Framework, focusing on setup and implementation examples. Topics covered include exposing an agent as an MCP server and implementing authentication methods such as API Key Authorization. Developers migrating from other frameworks like Semantic Kernel or AutoGen can utilize this guide to understand integration structures and standardized protocol usage for expanding AI connectivity solutions.",
      "tags": [
        "documentation",
        "agent",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "middleware_documentation",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides comprehensive insights into middleware applications within the Agent Framework, specifying various implementation patterns such as function-based, class-based, and decorator-based middleware for agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this guide valuable for understanding security validations, logging functions, and execution control mechanisms necessary for robust system integration.",
      "tags": [
        "middleware",
        "guide",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "multimodal_input_documentation",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an in-depth overview of leveraging the Agent Framework for processing multimodal input, such as images, audio, and PDFs, through various AI agents and APIs including OpenAI and Azure OpenAI. It details setup requirements, example implementations, and authentication practices, making it an essential guide for developers integrating multimodal AI capabilities or migrating from frameworks like AutoGen or Semantic Kernel.",
      "tags": [
        "guide",
        "multimodal",
        "agent",
        "intermediate"
      ]
    },
    {
      "name": "observability_documentation",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation provides an overview of the Agent Framework's observability features, specifically its OpenTelemetry-based configuration for monitoring agent and workflow performance. It details how developers can integrate and configure observability using provided modules and environment variables, offering both manual and automated setup options. This guide is ideal for developers transitioning from other AI frameworks, enabling them to effectively monitor token consumption and optimize application performance using standardized telemetry practices.",
      "tags": [
        "overview",
        "agent",
        "observability",
        "intermediate"
      ]
    },
    {
      "name": "purview_agent_documentation",
      "category": "purview_agent",
      "file_path": "python\\samples\\getting_started\\purview_agent\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\purview_agent\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This sample illustrates integrating Microsoft Purview policy enforcement within a ChatAgent using middleware. It covers authentication methods including certificate-based and interactive, the addition of PurviewPolicyMiddleware, and how policy rules affect chat interactions. Ideal for developers transitioning from LangChain or other frameworks seeking advanced middleware functionality.",
      "tags": [
        "guide",
        "middleware",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "threads_documentation",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README explores thread management techniques within the Agent Framework, emphasizing custom chat message stores and persistence strategies. It is ideal for developers transitioning from frameworks like Semantic Kernel or AutoGen, focusing on scalable state management and serialization in multi-session conversational AI systems.",
      "tags": [
        "threads",
        "guide",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "tools_documentation",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true
    },
    {
      "name": "workflows_documentation",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation introduces developers to the workflows feature of the Microsoft Agent Framework, explaining foundational concepts such as executors, edges, agents within workflows, and streaming basics. The document provides organized examples categorized into directories showcasing advanced capabilities such as checkpointing, orchestration, and human-in-the-loop workflows. It is a key reference for developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain who seek to understand structured and streaming workflow composition.",
      "tags": [
        "documentation",
        "workflow",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\a2a\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\a2a\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README covers the process for implementing agent-based communication using the A2A protocol within the Agent Framework. It provides a practical example showcasing agent discovery and inter-agent messaging through a single A2A agent setup, making it a valuable resource for developers transitioning from frameworks like Semantic Kernel and AutoGen to understand protocol-based agent orchestration capabilities.",
      "tags": [
        "guide",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\anthropic\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\anthropic\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides a comprehensive guide to integrating and utilizing Anthropic's Claude models within the Agent Framework. It highlights key features such as configuring OpenAI Chat Clients with Claude models, handling streaming responses, and employing tool-calling capabilities. This documentation is particularly valuable for developers migrating from frameworks like AutoGen or SemanticKernel to implement enhanced chat client functionalities.",
      "tags": [
        "documentation",
        "agent",
        "streaming",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides in-depth examples demonstrating the use and capabilities of Azure AI agents with the Agent Framework in handling chat-based interactions, tool integrations, and advanced configurations. It serves as a comprehensive guide for developers aiming to transition from frameworks like Semantic Kernel or AutoGen to Agent Framework, showcasing practical patterns and configurations for enhancing agent functionalities.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "tool_integration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This comprehensive README explains the key functionalities of the Agent Framework when integrated with Azure OpenAI services. It covers usage scenarios for various interaction methods including chat, function tools, code interpretation, and multimodal processing, offering examples for each use case. Developers transitioning from other frameworks such as AutoGen or Semantic Kernel will find this guide invaluable to understand both foundational and advanced usage patterns.",
      "tags": [
        "documentation",
        "agent",
        "azure_openai",
        "intermediate"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive guidance on integrating and utilizing Microsoft Copilot Studio Agents with the Agent Framework, including environment setup, authentication methods, and code examples tailored for environments requiring precise agent configuration. Developers migrating from frameworks like AutoGen or Semantic Kernel will find familiarity and structured approaches within the outlined examples, emphasizing advanced features and explicit agent configurations.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an in-depth guide on implementing custom agents and chat clients using the Microsoft Agent Framework. It highlights how to extend base classes to create tailored solutions, integrate with backend services, and manage streaming responses and threading effectively. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this for understanding advanced customization and compatibility with the Agent Framework.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "intermediate"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\ollama\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\ollama\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation provides guidance on utilizing Ollama models within the Agent Framework, highlighting configuration steps such as setting up environment variables and pulling models, alongside a practical example using OpenAI Chat Client for streaming and tool calling functionalities. It is particularly beneficial for developers transitioning from similar frameworks like LangChain, Semantic Kernel, or AutoGen, offering insights into modeling and integration capabilities.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides in-depth examples for utilizing the OpenAI Agent Framework, focusing on essential operations and integrations such as assistant creation, thread management, tool usage, and multimodal capabilities. Ideal for developers migrating from frameworks like Semantic Kernel or LangChain, it offers scenarios for both basic implementations and advanced configurations. An indispensable resource for integrating OpenAI-powered assistants effectively into applications.",
      "tags": [
        "documentation",
        "agent",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\notebooks\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\notebooks\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of how to utilize agents within the Azure AI platform using the Agent Framework. It includes detailed instructions for configuring, managing, and leveraging agents, as well as integrating advanced tools such as Bing Grounding and OpenAPI services. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this guide to understand best practices and features while transitioning.",
      "tags": [
        "documentation",
        "agent",
        "guide",
        "advanced"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation delves into the concepts and usage of the Mem0 context provider within the Agent Framework for persistent memory and context management. It explains key functionalities, such as memory scoping and association, and includes practical examples for basic, advanced, and self-hosted configurations. Developers migrating to the Agent Framework and aiming to implement long-term memory capabilities in conversational models will find this a valuable resource.",
      "tags": [
        "documentation",
        "agent",
        "context_providers",
        "advanced"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an in-depth guide to utilizing the Redis Context Provider within the Agent Framework, focusing on persistent, searchable memory capabilities with RediSearch and hybrid vector embeddings. It includes detailed examples illustrating full-text and hybrid search, thread scoping, and agent integration with tools, making it particularly useful for migrations from frameworks like LangChain or AutoGen that require advanced memory management solutions.",
      "tags": [
        "documentation",
        "advanced",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "evaluation_documentation",
      "category": "evaluation",
      "file_path": "python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of Red Team evaluation samples utilizing Azure AI Foundry with the Agent Framework, detailing setup instructions, evaluation methodologies, and best practices for improving agent resilience against adversarial attacks. It is especially useful for those migrating from frameworks like AutoGen or LangChain to understand integrating AI security and red teaming evaluations.",
      "tags": [
        "documentation",
        "advanced",
        "agent",
        "autogen_migration"
      ]
    }
  ],
  "dotnet": [
    {
      "name": "HostClientAgent",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\HostClientAgent.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\HostClientAgent.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a HostClientAgent using the Agent Framework in a .NET environment. It shows how to initialize an intelligent agent by connecting to multiple remote agents and utilizing their capabilities as tools, providing a robust solution for handling user queries and producing answers efficiently. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can use this as a reference to understand configuration and interaction patterns specific to the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates a command-line application for interaction with agent-based systems using a client agent interface. It highlights key concepts such as configuration management, logging, and handling structured agent communication in a host environment. Developers migrating from frameworks like Semantic Kernel or LangChain can use this as a practical example for integrating agent interactions into their applications and achieving conversational design patterns.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "HostAgentFactory",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\HostAgentFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\HostAgentFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation of Agent instances for specialized contexts such as invoice management, policy reviews, and logistics querying within a .NET framework. Key concepts such as persistent agent interactions, tool integration, and agent capability definition are covered, providing valuable techniques for developers implementing similar functionalities or migrating from other agent frameworks.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "tools",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Agent-to-Agent (A2A) server using the Microsoft Agent Framework in a .NET environment. It covers key concepts such as provisioning agents based on varying types and configuring dynamic tools to process agent tasks efficiently. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will find this guide beneficial for understanding agent integration and task delegation within their applications.",
      "tags": [
        "agent",
        "middleware",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "InvoiceQuery",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\Models\\InvoiceQuery.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\Models\\InvoiceQuery.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates an advanced implementation of data querying mechanisms for an invoice management system within a structured .NET application. It illustrates concepts such as retrieving filtered results using LINQ expressions and composing mock data structures with layered nested objects. Developers transitioning from AutoGen or Semantic Kernel frameworks will find this sample useful for understanding robust query handling and structured data operations in a .NET context.",
      "tags": [
        "intermediate",
        "data_querying",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "ActorFrameworkWebApplicationExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\ActorFrameworkWebApplicationExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\ActorFrameworkWebApplicationExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates how to integrate actor-based agent frameworks into a web application using .NET extensions. It demonstrates key concepts such as defining route handlers for agent discovery and configuring framework-specific mechanisms for managing agent catalogs. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can leverage the outlined patterns for modern web-based agent interactions.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates an advanced setup of AI Agents within a web-hosted framework. It showcases how to integrate various specialized agents like Pirate, Knights-and-Knaves, and Science Experts using sequential and concurrent workflows for accomplishing sophisticated tasks. This example is ideal for developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain and seeking to adopt comprehensive agent orchestration patterns.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "langchain_migration"
      ]
    },
    {
      "name": "ModelExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\ModelExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\ModelExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "The provided code sample illustrates extending the functionality of the Agent Framework used in the AgentWebChat project. It demonstrates how to define custom methods to configure and utilize AI resources such as Azure OpenAI and Azure AI Inference within distributed applications. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to understand integration points and resource management approaches in distributed systems.",
      "tags": [
        "agent",
        "autogen_migration",
        "advanced",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates configuring and running a distributed agent and web chat application using the Agent Framework. It showcases integration with Azure OpenAI resources, utilizing AI models for conversational interactions, and managing interdependent project orchestration within the scope of agent applications. Developers transitioning from frameworks like Semantic Kernel, Autogen, or LangChain should reference this example to understand the distributed application architecture and resource management offered by the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "ServiceDefaultsExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.ServiceDefaults\\ServiceDefaultsExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.ServiceDefaults\\ServiceDefaultsExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate standard services, such as service discovery, resilience techniques, health checks, and OpenTelemetry instrumentation, into Agent Web Chat applications using the ASP.NET Core framework. Developers migrating from frameworks with differing observability models, such as AutoGen, Semantic Kernel, or LangChain, may use this example to understand the comprehensive setup of monitoring and diagnostics services in a .NET environment.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "observability"
      ]
    },
    {
      "name": "A2AAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\A2AAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\A2AAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample implementation demonstrates integrating the A2A agent framework for handling web-based chat interactions using a client-side API. It showcases advanced capabilities like multi-agent management, streaming responses, and error handling. Developers migrating from platforms like AutoGen or Semantic Kernel can reference this to adopt A2A-specific conventions and client architectures.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "AgentDiscoveryClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\AgentDiscoveryClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\AgentDiscoveryClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "The provided code sample illustrates the implementation of an AgentDiscoveryClient class for retrieving agent information from an API endpoint within a .NET web application. Key concepts include HTTP-based API integration, JSON serialization and deserialization, and structured logging using ILogger. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this sample to understand efficient client-server interaction patterns and transparent logging for debugging in .NET-based solutions.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "chat_client"
      ]
    },
    {
      "name": "IAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\IAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\IAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to build and integrate web-based agents with streamable responses through an abstract client interface. It showcases foundational patterns for asynchronous streaming and message handling within the Agent Framework, providing migration guidance for developers transitioning from frameworks like Semantic Kernel or LangChain who seek comparable functionalities.",
      "tags": [
        "agent",
        "streaming",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "OpenAIChatCompletionsAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIChatCompletionsAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIChatCompletionsAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This implementation serves as a streamlined web client enabling interaction with an AI-based agent using the OpenAI ChatCompletions protocol. It outlines the usage of Microsoft Agent Framework for establishing communication and structured streaming responses. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can explore this sample for its practical integration techniques and detailed agent-client communication paradigms.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "OpenAIResponsesAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIResponsesAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIResponsesAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing a .NET client for handling OpenAI responses in an agent context, utilizing the OpenAI protocol for streamed interaction within an advanced agent framework. Key concepts include usage of client options configuration, handling streaming responses, and integration with APIs using authentication mechanisms. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain should reference this sample to understand the implementation details for OpenAI response handling.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the setup and configuration of a web-based agent chat application using the 'AgentWebChat' framework. It features integration of multiple service clients, interactive server components, and robust error handling mechanisms. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example helpful for understanding agent-oriented service discovery and web application deployment using .NET technologies.",
      "tags": [
        "agent",
        "workflow",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "ChatClientConnectionInfo",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientConnectionInfo.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientConnectionInfo.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation and parsing of connection information for a Chat Client within an Agent Framework system. It provides a structured approach for configuring endpoints, access keys, models, and providers, ensuring compatibility with various chat service providers such as OpenAI or Azure. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this sample to understand client connection and integration practices.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "ChatClientExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the integration and configuration of various types of Chat Clients, such as Ollama, OpenAI, Azure OpenAI, and Azure AI Inference, into a .NET application using extension methods. It showcases adaptable techniques for creating ChatClientBuilder instances tailored to a specific provider and ensures consistent tracing and logging through OpenTelemetry. Developers transitioning from frameworks like Semantic Kernel or AutoGen should reference this sample for insights into leveraging provider-specific configurations and maintaining observability across distributed systems.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample illustrates the integration of OpenTelemetry with the Agent Framework in a .NET environment, showcasing telemetry configuration for tracing, metrics, and structured logging. Developers exploring migration from frameworks such as Semantic Kernel or LangChain can leverage this sample to understand transitioning concepts regarding observability and agent architecture. Key concepts include telemetry instrumentation, agent interaction tracking, and integration with Azure OpenAI services.",
      "tags": [
        "agent",
        "observability",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to utilize an Agent-to-Agent (A2A) paradigm in Microsoft's AI framework. It configures an A2A agent to integrate its skills as function tools within another AI agent, facilitating enhanced skill sharing and functionality. Developers migrating from frameworks like Semantic Kernel or LangChain can leverage this sample to understand effective A2A communication and tool registration.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to interface with an AI agent using the A2A agent framework in a .NET environment, showcasing initialization and usage of the AIAgent class for interaction. This is relevant for developers transitioning from frameworks such as AutoGen or Semantic Kernel, as it provides insight into the unique features and workflow patterns of the Agent framework.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates how to utilize Azure Foundry Agents as backend to create AI-powered assistants using the .NET Core Persistent Agents SDK. It includes steps to define agent metadata, deploy persistent agents server-side, and interact with them to perform actions such as joke-telling in response to prompts. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain should reference this sample for incorporating Azure-based AI deployment into their applications.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and usage of a simple AI agent utilizing the OpenAI SDK integrated with Azure AI Foundry, showcasing model selection and invocation capabilities. Developers migrating from frameworks like Semantic Kernel or LangChain can leverage this example to familiarize themselves with agent creation and execution using Azure-hosted models.",
      "tags": [
        "agent",
        "autogen_migration",
        "advanced",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the basic implementation of an AI agent using the Azure OpenAI Chat Completion service for natural language processing tasks. It showcases the setup with Azure resources, including authentication and endpoint configuration, enabling developers to create an intelligent agent capable of handling input queries. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this sample helpful in understanding the Azure-specific API and authentication mechanisms.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration of an AI agent leveraging Azure OpenAI Responses to provide conversational outputs. It highlights the usage of Azure Identity for authentication and the configuration of an AI agent with custom instructions to simulate a joke-telling assistant. Developers migrating from frameworks like Semantic Kernel or LangChain can use this as a reference for Azure-centric AI integrations.",
      "tags": [
        "agent",
        "azure_openai",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a fully customized agent using the Agent Framework. It creates an agent that replicates user input in uppercase, showcasing custom thread management and message processing techniques. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can leverage this example to understand how to incorporate unique agent behaviors and threads into their applications effectively.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration of the Ollama backend with the Microsoft.Agents.AI framework to create a simple AI agent, named 'Joker', capable of responding to user prompts. It highlights constructing AI agents utilizing external APIs and the pattern for invoking and receiving results asynchronously. Developers transitioning from frameworks like Semantic Kernel or AutoGen can refer to this as an example of migrating to a modular agent system.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation of a simple AI agent leveraging ONNX as the backend for generating interactive responses. It highlights the integration of models with ONNX runtime and provides a practical example of agent functionality by utilizing instructions to produce context-aware outputs. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to understand constructing and interacting with agents using ONNX models.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to utilize OpenAI Assistants through the integration with the AI Agent Framework in .NET. It showcases creating, retrieving, interacting with, and cleaning up AI agents, providing practical examples for managing backend processes efficiently. Developers migrating from frameworks such as AutoGen or Semantic Kernel should reference this sample to understand transitioning to the Agent Framework.",
      "tags": [
        "agent",
        "autogen_migration",
        "beginner",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a basic AI agent using the OpenAI Chat Completion client within a .NET environment. It illustrates how to configure an AI agent with specific instructions and utilize its functionality for text-based output by interacting with the OpenAI API. Developers migrating from alternative frameworks such as AutoGen, Semantic Kernel, or LangChain can leverage this sample to understand the integration of the OpenAI Chat Completion model and implementing agent-based solutions.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a simple AI-powered agent utilizing OpenAI's response generation capabilities. It showcases how to construct an agent using a predefined configuration, invoke it with prompt-based interaction, and process the resulting output text. Developers migrating from frameworks such as Semantic Kernel or LangChain can benefit from understanding this streamlined approach to integrating AI services into .NET applications.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step01_Running\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step01_Running\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation and usage of a basic AI agent using Azure OpenAI as the backend integration. It highlights key features such as streaming responses and agent capabilities in natural language processing tasks. Developers looking to transition to Microsoft's Agent Framework from other frameworks like Semantic Kernel or AutoGen will find valuable insights within this example.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step02_MultiturnConversation\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step02_MultiturnConversation\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the implementation of a basic AI agent to facilitate multi-turn conversations using the Microsoft Agent Framework. It explores concepts such as agent creation, conversation threads, and streaming responses while interacting with the Azure OpenAI service. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain will benefit from understanding how the Agent Framework handles multi-turn dialogues and maintains state context.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step03_UsingFunctionTools\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step03_UsingFunctionTools\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the use of the Microsoft AI Agent Framework to create an interactive assistant capable of utilizing function tools to handle user queries. It illustrates both streaming and non-streaming interactions while leveraging custom tools, such as a weather function. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this to understand enhanced tool integrations and tailored agent responses.",
      "tags": [
        "agent",
        "tools",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step04_UsingFunctionToolsWithApprovals\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step04_UsingFunctionToolsWithApprovals\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates using a ChatClientAgent with function tools requiring human approvals within the Microsoft Agent Framework. It covers both streaming and non-streaming interaction via menu-related tools, allowing developers to integrate and handle human-in-the-loop mechanisms. Developers migrating from Semantic Kernel or LangChain can reference this to understand approval workflows and chat client integration.",
      "tags": [
        "agent",
        "human_in_loop",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step05_StructuredOutput\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step05_StructuredOutput\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to use the Agent Framework for structured output generation from AI agents using Azure OpenAI service. It covers setting up agents with type-specific response handling, utilizing streaming structured data capabilities, and deserializing JSON-based outputs. Developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain can reference this guide for efficiently transitioning structured agent workflow implementations to the Agent Framework.",
      "tags": [
        "agent",
        "structured_output",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step06_PersistedConversations\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step06_PersistedConversations\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates creating a simple AI agent using Azure OpenAI services with conversation management capabilities that allow sessions to persist between executions. Specifically, it demonstrates the serialization of conversation threads for storage and subsequent resumption, a useful feature for long-running or user-specific interactions. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to understand and implement persisted conversational experiences efficiently.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "persisted_conversations"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step07_3rdPartyThreadStorage\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step07_3rdPartyThreadStorage\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of an agent-powered conversational system using the Microsoft Agent Framework. It showcases persisting conversation threads using an in-memory vector store and storing serialized thread states for later reactivation, enabling advanced context handling. Developers transitioning from frameworks such as Semantic Kernel or LangChain should reference this example to understand integrating Microsoft Agent Framework's capabilities into their workflows.",
      "tags": [
        "agent",
        "chat_client",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step08_Observability\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step08_Observability\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of an AI agent utilizing the Agent Framework with Azure OpenAI integration, featuring telemetry logging using OpenTelemetry for enhanced observability. Developers will learn how to configure OpenTelemetry tracing, integrate an AI model, and enable streaming responses by interacting with the Azure OpenAI backend. Developers transitioning from frameworks like Semantic Kernel or AutoGen can reference this to understand observability best practices and streamlined agent setup.",
      "tags": [
        "agent",
        "observability",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step09_DependencyInjection\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step09_DependencyInjection\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates how to integrate an AI agent using Microsoft's Agent Framework through dependency injection, emphasizing extensible and maintainable code structure. It showcases setting up agent configurations and hosting service lifecycles to interact with user input, including chat functionalities streamed in real-time. Developers considering transitions from frameworks like AutoGen or Semantic Kernel will find this example useful for understanding modern dependency injection paradigms and agent interaction design.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the process of converting an AI agent into a Model Context Protocol (MCP) tool, demonstrating integration with Azure AI services and persistent agents. Developers migrating from frameworks like AutoGen or Semantic Kernel can learn how to set up AI agents with customized behavior and expose them as tools with standardized server-side protocols.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates utilizing Azure's AI services to analyze visual content using an AI-powered agent. It exemplifies creating a multimodal conversational agent capable of processing both textual and image data and describes its associated functionalities like streaming response handling. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can leverage this example to understand efficient multimodal data handling and agent configuration best practices.",
      "tags": [
        "agent",
        "intermediate",
        "multimodal",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step12_AsFunctionTool\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step12_AsFunctionTool\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample introduces developers to creating and configuring agents using the Azure OpenAI API. It demonstrates the integration of functional tools as callable subagents and exemplifies advanced agent composition. Developers transitioning from frameworks like Semantic Kernel or AutoGen can utilize this example to understand tool interfacing and compositional AI patterns.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step13_Memory\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step13_Memory\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation and utilization of a custom memory component within an Agent Framework, facilitating persistent user information across conversations. Core concepts include memory serialization, deserialization, and scoped data sharing between threads. Developers migrating from frameworks like Semantic Kernel or LangChain can analyze this to understand advanced agent personalization techniques.",
      "tags": [
        "agent",
        "memory",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of middleware layers within the Azure AI Agents framework, showcasing robust features such as PII filtering, guardrails, logging, and human-in-the-loop workflows. It effectively illustrates agent configuration with practical use-cases, enabling precise control and extension of AI functionalities. Developers migrating from frameworks like Semantic Kernel or LangChain can benefit from the structured agent lifecycle management and middleware application showcased here.",
      "tags": [
        "agent",
        "middleware",
        "human_in_loop",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step15_Plugins\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step15_Plugins\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample presents the implementation of a plugin-based architecture within the AI Agent Framework in a .NET environment. It demonstrates how to create and integrate AI function-specific plugins, leveraging dependency injection to manage service dependencies. Developers transitioning from platforms like AutoGen or Semantic Kernel can refer to this sample to understand modular plugin construction and advanced tool integration, enhancing maintainability and extensibility.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step16_ChatReduction\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step16_ChatReduction\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a chat history reducer in the Agent Framework to manage chat context within model size constraints. Using Microsoft.Extensions.AI.IChatReducer, the solution showcases message management techniques with Azure OpenAI integration, providing a programmatic approach to controlling chat memory. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example for optimizing chat handling in agent workflows.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the integration of the Azure AI Agent framework to utilize background responses for OpenAI models. It covers implementing continuous polling and managing interruptions during streaming responses. Developers migrating from frameworks like AutoGen or LangChain can reference this to explore advanced response handling scenarios.",
      "tags": [
        "agent",
        "streaming",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step01_Running\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step01_Running\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation of an AI agent using OpenAI's backend, showcasing fundamental interactions with the model to generate responses and stream updates. It explains how to configure the agent with specific instructions and handle chat messages in synchronous and asynchronous manners. Developers transitioning from frameworks such as AutoGen or Semantic Kernel can use this as a guide to understand the Agent Framework's capabilities.",
      "tags": [
        "agent",
        "beginner",
        "chat_client",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step02_Reasoning\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step02_Reasoning\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample introduces the process of building and utilizing an AI agent with reasoning capabilities via the OpenAI client library within a .NET ecosystem. It showcases non-streaming and streaming modes for handling queries with detailed reasoning and token usage metrics. Developers migrating from frameworks like Semantic Kernel or LangChain can benefit from this example to understand integration patterns and harness advanced reasoning configurations.",
      "tags": [
        "agent",
        "intermediate",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the usage of the Azure OpenAI service within the Model Context Protocol (MCP) framework to create an AI agent capable of interacting with GitHub repositories. Key concepts covered include the integration of MCPClient for tool listing and command execution as well as the utilization of AzureOpenAIClient with specific deployment parameters. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample as a guide to effectively adapt their code to leverage MCP's tool-oriented agent capabilities.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the usage of the Model Context Protocol (MCP) with an AI agent in a .NET application, showcasing capabilities such as authentication handling and toolset integration for responses, particularly using Azure OpenAI services. Developers migrating from frameworks like Semantic Kernel or LangChain can utilize this example to understand implementing authenticated server communications and dynamic toolsets in AI workflows.",
      "tags": [
        "agent",
        "intermediate",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates creating and managing an AI agent using the Azure Foundry Agents backend within a .NET application. Key concepts covered include the setup and use of server-side persistent agents, integration with tools like MCP, and sample operations such as invoking agents and handling responses. Developers considering migration from frameworks like AutoGen or Semantic Kernel to Azure's agent infrastructure will find this example beneficial for understanding foundational practices.",
      "tags": [
        "agent",
        "azure_foundry_migration",
        "tools",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Loop\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Loop\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates building a Workflow that executes a simple number guessing game using interconnected Executors and loops for communication and logical progression. It showcases foundational concepts in workflow construction with signal-based messaging, making it useful for developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain seeking insights into implementing continuous processes in the Agent framework.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample introduces shared states in workflow executions, showcasing how executors can interact with shared data scopes to enable coordinated and concurrent execution. It demonstrates key concepts such as state management, fan-out/fan-in patterns, and output aggregation. Developers referencing this sample will gain insights valuable for migrating to Agent Framework from parallel task coordination systems like LangChain or AutoGen.",
      "tags": [
        "workflow",
        "intermediate",
        "fan_out",
        "langchain_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to efficiently manage and access shared state resources within the context of workflows using the .NET Agent Framework. It introduces concepts tailored for centralizing resource management, providing developers a streamlined approach to handle data dependencies effectively while transitioning from solutions such as AutoGen, Semantic Kernel, or LangChain.",
      "tags": [
        "workflow",
        "resources",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates generating visual representations of Workflow graphs using Mermaid and DOT formats within the Microsoft Agent Framework environment. It utilizes the extension methods ToMermaidString and ToDotString to produce clear documentation and debugging views for workflows in applications. Developers migrating from frameworks such as Semantic Kernel or LangChain will find this valuable for understanding and implementing multiformat workflow visualizations.",
      "tags": [
        "workflow",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\CustomAgentExecutors\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\CustomAgentExecutors\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to use custom executor components within the Microsoft Agent Framework to manage AI workflows focused on generating dynamic content. It showcases creating agents for specific tasks, integrating them into a workflow, and processing structured outputs from Azure AI services. This sample is beneficial for developers migrating from frameworks like Semantic Kernel or LangChain who seek structured output and adaptive workflow capabilities.",
      "tags": [
        "agent",
        "workflow",
        "structured_output",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\FoundryAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\FoundryAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to utilize Azure Foundry Agents within a workflow orchestration for multilingual text translation tasks. It integrates concepts like persistent agents, WorkflowBuilder for designing execution pathways, and streaming execution for real-time processing. Developers migrating from frameworks like Semantic Kernel and AutoGen can reference this to adopt best practices for workflow construction and agent management.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This DotNet code sample introduces the concept of workflows as agents within the Agent Framework, demonstrating the setup and interaction with a concurrent processing workflow. It covers creating workflows using Azure OpenAI integration and transforming them into interactive AI agents capable of multilingual responses. Developers migrating from frameworks like Semantic Kernel or LangChain can leverage this sample to learn how to implement agent frameworks and interactive loop mechanisms in workflows.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "streaming"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a concurrent workflow using agent-based models for processing linguistic tasks. It covers concepts such as agent creation, parallel message processing, and result aggregation. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this for implementing structured workflows with distributed processing.",
      "tags": [
        "workflow",
        "agent",
        "parallel",
        "langchain_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the usage of checkpoints in workflows, enabling the saving and rehydration of state during execution. Key concepts include super steps for staged processing and rehydration for restarting workflows from saved checkpoints. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this to implement state persistence and workflow continuity.",
      "tags": [
        "workflow",
        "checkpoint",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a checkpointable workflow using the Microsoft Agent Framework, showcasing concepts such as executors, signals, checkpoints, state restoration, and inter-executor communication. Developers migrating from frameworks like Semantic Kernel or LangChain will find it insightful for its structured and reusable workflow definition, as well as state management strategies. This example is particularly useful for creating persistent workflows that require state handling between executions.",
      "tags": [
        "workflow",
        "checkpoint",
        "intermediate",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the implementation of workflows using checks, enabling state saving and restoration within an application. It introduces key concepts such as super steps, checkpoints, and continuation mechanisms important for constructing resilient and modular workflows. Developers migrating from frameworks like Semantic Kernel or AutoGen can reference this sample to understand checkpoint management for progressive execution and fault tolerance.",
      "tags": [
        "workflow",
        "checkpoint",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a checkpointing and resumption workflow using the Agent Framework, focusing on a number guessing game scenario. It showcases concepts such as executor communication, state management, and feedback loops within workflows, providing developers with a practical example of implementing state-preserving algorithms. Developers transitioning from other frameworks such as Semantic Kernel, AutoGen, or LangChain can reference this sample to understand state checkpointing and handling in agent-hosted environments.",
      "tags": [
        "workflow",
        "intermediate",
        "checkpoint",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates the implementation of workflow checkpointing with human-in-the-loop interactions using the Microsoft Agents AI Framework. It illustrates advanced concepts such as state persistence via checkpoints, workflow resumption, and interactive input handling, thereby enabling modular and resilient design of agent workflows. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this for practical insights on integrating checkpointing capabilities.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "advanced"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates building a workflow using Microsoft's Agent Framework featuring checkpointing and human-in-the-loop interaction. The workflow plays a number guessing game, showcasing advanced features like context restoration using checkpoint states and inter-executor communication. Developers from frameworks such as Semantic Kernel, AutoGen, or LangChain can refer to this sample to understand workflow creation utilizing state management and human involvement patterns.",
      "tags": [
        "workflow",
        "human_in_loop",
        "checkpoint",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\Concurrent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\Concurrent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates concurrent workflow execution utilizing the fan-out and fan-in patterns in the context of AI task management. It introduces concepts such as agent-based task parallelization and result aggregation, which are essential for optimizing performance in multi-agent systems. Developers transitioning from frameworks like Semantic Kernel or LangChain will find insights into leveraging Workflow Builders and Executors for synchronized task orchestration and integration.",
      "tags": [
        "workflow",
        "parallel",
        "agent",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\MapReduce\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\MapReduce\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement a Map-Reduce workflow using the Microsoft Agent Framework. It showcases core features such as creating fan-out and fan-in edges to execute operations concurrently, and utilizing persistent storage for intermediate results to optimize memory usage. Developers migrating from frameworks such as Semantic Kernel and LangChain can leverage this sample to understand efficient workflow patterns in distributed tasks.",
      "tags": [
        "workflow",
        "advanced",
        "parallel",
        "langchain_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of conditional workflows using edge conditions to route emails based on spam detection results. It showcases key concepts in the Agent Framework, such as agent creation, structured data handling, and building decision-based workflows. Developers migrating from other frameworks such as Semantic Kernel, AutoGen, or LangChain can use this sample as a reference for implementing dynamic routing of tasks in email processing scenarios.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of a helper class for reading resource files within a workflow or agent framework application. It exemplifies how to manage dependencies through modular resource handling, a critical pattern for maintaining organized and scalable implementations. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this to understand resource management best practices within the Agent Framework.",
      "tags": [
        "workflow",
        "beginner",
        "semantic_kernel_migration",
        "resources_management"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates using the Agent Framework to create a branching workflow based on conditional routing using a switch-case construct. It showcases agents and executors handling various spam detection results, leveraging structured outputs for decision-making. Developers migrating from frameworks like Semantic Kernel or LangChain can gain insights into constructing workflows with clear and modular conditional pathways.",
      "tags": [
        "workflow",
        "structured_output",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the usage of resource management in workflow scenarios, emphasizing modular access pattern and data retrieval efficiency. Developers leveraging frameworks such as AutoGen or LangChain can find applicable methods for resource encapsulation and workflow execution enhancement.",
      "tags": [
        "workflow",
        "beginner",
        "tools",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the use of multi-selection routing in a workflow utilizing the Agent Framework. It covers concepts such as parallel edge creation, executor triggering based on data characteristics, and integration with external services like Azure OpenAI. Developers exploring migration from frameworks like Semantic Kernel or LangChain can leverage this example to understand parallel and conditional resolutions in structured workflows.",
      "tags": [
        "workflow",
        "parallel",
        "fan_out",
        "autogen_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the use of a resource helper class to load resources dynamically within a workflow application. It highlights practical techniques for organizing and retrieving data efficiently in agent-based systems and supports developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain to manage workflow resources effectively.",
      "tags": [
        "workflow",
        "resources",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Generated",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Generated.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Generated.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample illustrates the implementation of a declarative workflow within the Agent Framework, employing Power FX for evaluated expressions. It serves as a guide for initializing workflow contexts, managing state updates, and executing dynamic expressions, highlighting patterns such as variable assignments and sequential workflow steps. Developers transitioning from Semantic Kernel, AutoGen, or LangChain frameworks can leverage this example to understand integrating declarative workflows within their applications.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample illustrates how to construct and execute a declarative workflow transformed into code using Microsoft's Agent Framework. It showcases the usage of declarative workflow builders, configurations, and Azure integration for managing workflows. It's particularly valuable for developers transitioning from Semantic Kernel or LangChain frameworks, offering insights into leveraging advanced workflow orchestration and execution capabilities.",
      "tags": [
        "workflow",
        "advanced",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteWorkflow\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteWorkflow\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation and execution of a declarative workflow using the Azure Agents Framework. It utilises a JSON or memory-based checkpoint system to handle external requests and ensure durability during the workflow process. Developers migrating from tools such as Semantic Kernel, AutoGen, or LangChain should use this sample to understand workflow serialization and execution patterns.",
      "tags": [
        "workflow",
        "checkpoint",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\GenerateCode\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\GenerateCode\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates converting declarative YAML-based workflow definitions into executable C# code using the Microsoft Agent Framework's Declarative Workflow Builder. It explores parsing and integrating workflows programmatically, showcasing essential concepts like dynamic code generation and declarative-to-programmatic transitions. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to understand YAML workflow translation and integration possibilities.",
      "tags": [
        "workflow",
        "yaml",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a human-in-the-loop workflow using Microsoft Agent Framework concepts, featuring request ports for external interaction. Intended for beginners, the sample illustrates using RequestInfoEvent and ExternalResponse in scenarios requiring external inputs. Developers migrating from frameworks like Semantic Kernel or LangChain will benefit from understanding workflow integration strategies.",
      "tags": [
        "workflow",
        "human_in_loop",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates constructing a human-in-the-loop interactive workflow for a number-guessing game utilizing the AI Agent Framework. Key concepts include workflow builder design, executors for signal processing, and dynamic loop handling via request and context objects. Developers migrating from frameworks like LangChain, Semantic Kernel, or AutoGen can refer to this for understanding iterative workflows and incorporating interactive signals.",
      "tags": [
        "workflow",
        "human_in_loop",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Observability\\ApplicationInsights\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Observability\\ApplicationInsights\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of observability in a text processing workflow using Application Insights in the .NET Agent Framework. It includes creating traceable workflow executors, connecting them sequentially, and leveraging OpenTelemetry and Azure Monitor for monitoring. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to optimize their observability strategies within complex workflows.",
      "tags": [
        "workflow",
        "observability",
        "dotnet",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Observability\\AspireDashboard\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Observability\\AspireDashboard\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing observability in workflows using the Agent Framework and OpenTelemetry with Aspire Dashboard for visual trace display. The code constructs an example pipeline with components performing text transformations, showcasing practical applications of tracing capabilities. Developers migrating from Semantic Kernel, AutoGen, or LangChain frameworks can utilize this example to understand integrating observability features in processing workflows effectively.",
      "tags": [
        "observability",
        "agent",
        "semantic_kernel_migration",
        "workflow"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\01_ExecutorsAndEdges\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\01_ExecutorsAndEdges\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample provides a fundamental introduction to constructing and executing workflows using the Agent Framework. It demonstrates core concepts such as executors and edges, showcasing their functionality through a text transformation pipeline that converts input to uppercase and reverses the string. Developers migrating from frameworks like Semantic Kernel or LangChain will find this example helpful for understanding workflow constructs and integration points.",
      "tags": [
        "workflow",
        "beginner",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\02_Streaming\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\02_Streaming\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates streaming capabilities within workflows using the Agent Framework. It covers constructing workflows with executors that transform text and utilize streaming functions for real-time feedback on execution progress. Developers transitioning from frameworks like Semantic Kernel or LangChain will find parallels in configuring sequential transformations and handling intermediate results effectively.",
      "tags": [
        "workflow",
        "streaming",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\03_AgentsInWorkflows\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\03_AgentsInWorkflows\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates integrating AI-powered agents into a sequential workflow for text translation. It showcases the use of the Agent Framework to connect agents, each tasked with translating text into specific languages. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can leverage this sample to understand agent orchestration within complex workflows.",
      "tags": [
        "agent",
        "workflow",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\04_AgentWorkflowPatterns\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\04_AgentWorkflowPatterns\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This dotnet code sample illustrates the implementation of agent workflows within varied patterns using the Microsoft Agent Framework. It demonstrates techniques for constructing workflows including sequential, concurrent, handoff, and group chat configurations, showcasing the integration of AI agents for specialized functions. Developers migrating from frameworks like Semantic Kernel or LangChain will find this relevant for understanding workflow orchestration and agent management.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\05_MultiModelService\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\05_MultiModelService\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to construct multi-agent workflows using a range of AI services, including OpenAI, Amazon Bedrock, and Anthropic, in a .NET application. It showcases the integration and orchestration of agents performing tasks such as research, evaluation, and summarization, employing the Agent Framework. Developers migrating from frameworks like AutoGen or Semantic Kernel can use this example to understand multi-model service interoperability and sequential workflow creation.",
      "tags": [
        "workflow",
        "agent",
        "multimodal",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\06_SubWorkflows\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\06_SubWorkflows\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This dotnet sample showcases hierarchical workflow composition using sub-workflows within the Microsoft Agent Framework. It demonstrates building a parent workflow that incorporates a sub-workflow as an executor, enabling modular and maintainable development. Developers migrating from frameworks like Semantic Kernel and LangChain can leverage this structure to implement intricate workflow logic effectively.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample showcases the integration of AI-powered agents and custom executors into a unified workflow for structured content moderation. It highlights advanced concepts such as adapter executors and sequential agent orchestration, crucial for migrating workflows to frameworks like AutoGen, Semantic Kernel, or LangChain. Developers harmonizing deterministic tasks with AI decision-making should explore this sample.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "dotnet_overview",
      "category": "root",
      "file_path": "dotnet\\samples\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview and guidance on using the Microsoft Agent Framework for creating and managing AI-powered agents and proxies. It covers foundational aspects such as agent client structures, telemetry integrations, and migrating from alternative frameworks like Semantic Kernel to enhance efficiency and functionality. Developers migrating from other frameworks are advised to reference this guide for structured approaches to adopt the Agent Framework effectively.",
      "tags": [
        "overview",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains how to utilize the A2A protocol through the A2AClientServer sample using the A2A SDK. It demonstrates the creation of server agents and a client application to interact with these remote agents via agent messaging for tasks such as logistics and policy analysis. Developers making migrations from frameworks like AutoGen or LangChain to implement agent communication should reference this guide.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation serves as a comprehensive starting point for developers exploring the Agent Framework, offering sample guides on fundamental topics such as agent creation, provider integration, A2A communication, OpenTelemetry instrumentation, and workflows. Developers migrating from frameworks like Semantic Kernel or LangChain will find detailed insights into leveraging the framework's unique capabilities.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive guide to setting up and executing an A2A client application using the Agent Framework, highlighting interaction with multiple agent endpoints via the A2A protocol. It delves into environment configuration, client initialization, and command-line request handling, making it essential for developers migrating from other frameworks such as AutoGen or Semantic Kernel to appreciate structured agent orchestration.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an introduction to working with Agent Framework's Agent-to-Agent (A2A) features. It includes guidance on utilizing A2A agents as functional tools integrated with other AI agents for enhanced collaboration. Ideal for developers transitioning from frameworks like Semantic Kernel or AutoGen, it facilitates understanding of inter-agent capabilities.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive tutorial on integrating OpenTelemetry with the Microsoft Agent Framework using Azure OpenAI services. It details the necessary setup, usage scenarios, and instrumentation capabilities for telemetry visualization, making it ideal for developers seeking to enhance observability in their AI solutions or migrate from frameworks like AutoGen or Semantic Kernel.",
      "tags": [
        "documentation",
        "observability",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains how to create and utilize AIAgent instances by integrating them with various providers such as Azure Foundry, OpenAI, and ONNX. It is particularly useful for developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain as it provides practical examples for implementing agents using different underlying inference services. Additionally, setup details for running these samples via console or Visual Studio are provided, catering to developers aiming to adapt or expand their existing solution architectures.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive guidance for developers getting started with the Agent Framework. It explores basic functionality, concepts, and use of tools to create agents using Azure OpenAI, framing the foundational capabilities required for effective implementation. Developers migrating from Semantic Kernel, AutoGen, or LangChain should consult this guide to familiarize themselves with unique features and setup requirements.",
      "tags": [
        "tutorial",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive details about incorporating OpenAI exchange types with the Agent Framework, addressing issues arising from conflicting libraries and enabling seamless integration for developers using the OpenAI SDK. It illustrates how to create and execute a basic AI agent using OpenAI's native SDK types. This guide is essential for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain and requires understanding library conflicts and their resolution.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces the Model Content Protocol (MCP) tools within the Agent Framework, providing examples and step-by-step instructions for setup, execution, and debugging. Key features include integration with Azure OpenAI services and credential management. This is particularly beneficial for developers adapting from frameworks like AutoGen and Semantic Kernel to leverage MCP features for agent-based tasks.",
      "tags": [
        "tutorial",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces key workflow concepts within the Agent Framework, including foundational workflow patterns like executors and edges, agent integration, and advanced concepts such as conditional workflows and checkpointing. It provides step-by-step guides suitable for developers transitioning from frameworks like Semantic Kernel or AutoGen, empowering them to leverage Agent Framework's robust capabilities effectively.",
      "tags": [
        "documentation",
        "workflow",
        "structured_output",
        "streaming"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide illustrates the use of an A2A agent encapsulated as functional tools, demonstrating how its skills can be leveraged by another AI agent, essential for developers integrating cross-framework features like AutoGen or LangChain.",
      "tags": [
        "documentation",
        "tools",
        "agent",
        "intermediate"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces foundational concepts for creating AI-enabled agents through the Agent Framework, particularly focusing on integration with A2A-hosting services supporting private discovery configurations.",
      "tags": [
        "documentation",
        "agent",
        "advanced",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation explains how to configure and utilize Azure Foundry within the .NET Agent Framework for enhanced AI task processing capabilities. It details prerequisites like the Azure CLI and environment variables for seamless integration. Developers transitioning from other frameworks like LangChain or Semantic Kernel should reference this guide to understand how to set up and operate Azure Foundry agents effectively.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a step-by-step guide to creating and utilizing AI agents using models hosted in Azure AI Foundry, leveraging the OpenAI SDK. Core functionalities covered include model selection and setup, environment configuration, and authentication methods for access to Azure resources. Developers transitioning from other frameworks like AutoGen or Semantic Kernel should use this guide to understand the integration of Azure-hosted AI models.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides instructions to set up and use the Agent Framework with Azure OpenAI services, ensuring proper configuration and authentication. It covers prerequisites and standard environment variable settings, aiding developers transitioning from frameworks like Semantic Kernel or LangChain in understanding integration techniques.",
      "tags": [
        "documentation",
        "agent",
        "azure_openai",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation demonstrates how developers can set up and authenticate Azure OpenAI service integration for applications using Agent Framework. It covers essential configuration steps like SDK setup, environment variable definition, and Azure CLI usage, suitable for those migrating from frameworks like Semantic Kernel or AutoGen to leverage Azure-specific implementations.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation guides developers through the process of implementing a custom agent without external AI dependencies, offering a 'parrot' agent example showcasing transformations and invocation modes. The guide is beneficial for developers transitioning from frameworks such as Semantic Kernel or LangChain to understand self-contained agent design.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a detailed walkthrough for integrating the Ollama system into a .NET Agent Framework application, covering prerequisites such as Docker setup and environment configuration. Useful for developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain to configure and leverage Ollama for advanced AI modeling capabilities.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces the setup and configuration of an Agent Framework using an ONNX model backend. It highlights the prerequisites necessary for enabling function-based support in workflow agents, and provides essential commands for model integration. Developers transitioning from frameworks like AutoGen or Semantic Kernel should consult this guide for adapting ONNX model compatibility.",
      "tags": [
        "guide",
        "agent",
        "onnx_model_integration",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides guidance for initializing and setting up an Agent Framework instance utilizing the OpenAI Assistants API, highlighting migration considerations for transitioning from deprecated API features. It is particularly useful for developers moving from frameworks like LangChain or AutoGen to ensure compliance with latest prerequisites and best practices.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README provides a detailed overview and setup instructions for integrating OpenAI's chat completion capabilities via the Agent Framework in .NET projects. It covers necessary environment configurations and key prerequisites. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this guide pertinent for leveraging advanced conversational AI functionalities within the Agent Framework.",
      "tags": [
        "guide",
        "agent",
        "openai_api",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces developers to setting up the Agent Framework with OpenAI responses, covering initialization requirements and environment variables configuration. It emphasizes how to integrate OpenAI APIs within the given framework, making it particularly relevant for developers transitioning from auto-generation frameworks like Semantic Kernel or LangChain.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation guides users through the process of configuring an AI agent as an MCP tool within the Agent Framework. It demonstrates integration with MCP clients and tools, such as the MCP Inspector, highlighting features that allow interaction with Azure-based AI models. Developers transitioning from Semantic Kernel, AutoGen, or LangChain frameworks can leverage this guide to understand environment variable setup and tool execution for their agents.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces how to integrate vision capabilities into an AI agent using the Agent Framework, particularly focusing on multimodal input and Azure OpenAI integration. It is well-suited for developers migrating systems or concepts from other frameworks that aim to expand their AI implementations with image analysis features.",
      "tags": [
        "guide",
        "agent",
        "multimodal",
        "advanced"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of implementing middleware within the Agent Framework to enhance functionality such as logging, filtering, and pipeline control in client chat and agent environments. It explores integration with Azure OpenAI for seamless advanced language operations. Developers migrating from frameworks such as Semantic Kernel or AutoGen will find this guide helpful when implementing customizable middleware in agent-based workflows.",
      "tags": [
        "documentation",
        "middleware",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation elaborates on utilizing background responses within the Agent Framework to enable efficient handling of long-running operations in agents. It covers polling for completion and resuming after interruptions using continuation tokens. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this guide to implement background response patterns effectively in their applications.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation presents a sample using the Model Context Protocol (MCP) Server integration with the Agent Framework, highlighting the standardized approach for providing context to large language models (LLMs). It includes instructions for configuring the environment, connecting to MCP servers, retrieving and adapting MCP tools to agent functionalities, and invoking these tools effectively. Ideal for developers migrating from frameworks like Semantic Kernel or LangChain to implement extended protocol-based functionalities.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive guide for connecting to a Model Context Protocol (MCP) server using OAuth 2.0 authentication within the Agent Framework environment. It includes steps for implementing custom authentication flows, retrieving and converting available MCP tools for agent integration, and invoking functions from these tools. Developers migrating to Agent Framework from platforms like Semantic Kernel, LangChain, or AutoGen will find this guide valuable for setting up structured, authentication-enabled workflows integrating external toolsets.",
      "tags": [
        "guide",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive introduction to setting up the Agent Framework with Azure Foundry, including prerequisites, environment configuration, and authentication steps. It clearly outlines how to establish project endpoints and model deployment settings effectively, which is useful for developers transitioning from frameworks like Semantic Kernel or LangChain.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation serves as an introduction to constructing and running declarative workflows using the Agent Framework, specifically utilizing YAML-based Foundry Workflow files. It guides developers on configuring necessary project access credentials, setting up agents, and executing workflows with customizable paths. Ideal for migrating from frameworks such as AutoGen or LangChain to understand pattern implementations.",
      "tags": [
        "guide",
        "workflow",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide covers the visualization of workflows within the Agent Framework, utilizing methods for graphical representations with Mermaid and Graphviz formats. By illustrating fan-out/fan-in workflows using these tools, it enables developers migrating from other frameworks, such as LangChain or Semantic Kernel, to effectively understand and utilize workflow visualization techniques for structured and parallel task orchestration.",
      "tags": [
        "documentation",
        "workflow",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This detailed guide explores the integration of AI agents and custom executors in workflows, providing insights into mixed-type workflows and adapter patterns. It is essential for developers transitioning from frameworks like LangChain or AutoGen, enabling understanding of the use of agents for natural language processing and combining deterministic logic with AI capabilities.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    }
  ],
  "generated_at": "2025-10-28T14:46:35.102634Z"
}