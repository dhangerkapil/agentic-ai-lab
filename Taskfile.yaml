version: '3'

env:
  WORKSHOP_TITLE: "AI Foundry - End to End Workshop"
  DEFAULT_REGION: eastus2

tasks:
  default: 
    cmds: 
    - task --list 
  
  up: 
    desc: Builds a Complete {{.WORKSHOP_TITLE}} Environment
    cmds:
    - task: init
    - task: apply 
    - task: creds
    - task: venv-up

  init:
    dir: ./infrastructure
    desc: Initializes Terraform workspace
    cmds:
    - terraform workspace new {{.REGION}} || true
    - terraform workspace select {{.REGION}}
    - terraform init
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  apply:
    dir: ./infrastructure
    desc: Creates Azure infrastructure
    cmds:
    - terraform apply -auto-approve
      -var "region={{.REGION}}" 
      -var "tags={{.WORKSHOP_TITLE}}"
      -compact-warnings
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  refresh:
    dir: ./infrastructure
    cmds:
    - terraform refresh
      -var "region={{.REGION}}" 
      -var "tags={{.WORKSHOP_TITLE}}"
      -compact-warnings
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  down:
    dir: ./infrastructure
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:       
    - docker stop aspire-dashboard || true
    - terraform destroy -var "region={{.REGION}}" -var "tags={{.WORKSHOP_TITLE}}" -compact-warnings || true
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true
    - task: venv-down
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  otel:
    desc: Starts up .net Aspire for OTEL endpoint 
    cmds:
    - docker run --rm -p 18888:18888 -p 4317:18889 -d --name aspire-dashboard mcr.microsoft.com/dotnet/aspire-dashboard:latest > /dev/null 2>&1 || true
    - docker ps -f name=aspire-dashboard
    - cmd: echo $(docker logs aspire-dashboard | grep -i Login)
      silent: true 

  venv-up:
    desc: Initialized python virtual environment
    cmds:
    - python -m venv .venv
    - pip install "agent-framework[viz]" --pre 
    - silent: true 
      cmd: echo -e '\tüîπ\033[1m\e[38;5;45mNow copy and paste the following command to activate the virtual environment:' &&
           echo -e '\t‚û°Ô∏è\033[1m\e[38;5;45msource .venv/bin/activate'
      
  venv-down:
    desc: Cleans up the python virtual environment
    cmds:
    - rm -rf .venv

  creds:
    dir: ./infrastructure
    desc: Sets up the .env file for the projects
    cmds:  
    - silent: true
      cmd:  echo '{{.TF_OUTPUT}}' | jq -r '"AI_FOUNDRY_PROJECT_ENDPOINT=" + .PROJECT_CONNECTION_STRING.value'  > ../.env 
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_AI_PROJECT_ENDPOINT=" + .AZURE_AI_PROJECT_ENDPOINT.value' >> ../.env 
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"MODEL_DEPLOYMENT_NAME=" + .MODEL_DEPLOYMENT_NAME.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"EMBEDDING_MODEL_DEPLOYMENT_NAME=" + .EMBEDDING_MODEL_DEPLOYMENT_NAME.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"TENANT_ID=" + .TENANT_ID.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_SUBSCRIPTION_ID=" + .AZURE_SUBSCRIPTION_ID.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"GROUNDING_WITH_BING_CONNECTION_NAME=" + .GROUNDING_WITH_BING_CONNECTION_NAME.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_AI_SEARCH_ENDPOINT=" + .AZURE_AI_SEARCH_ENDPOINT.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_AI_SEARCH_API_KEY=" + .AZURE_AI_SEARCH_API_KEY.value' >> ../.env 
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"SERVICE_FOR_CU=" + .SERVICE_FOR_CU.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"SERVICE_API_FOR_CU=" + .SERVICE_API_FOR_CU.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"SAMPLE_CLAIMS_BUNDLE=" + .SAMPLE_CLAIMS_BUNDLE.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_OPENAI_ENDPOINT=" + .AZURE_OPENAI_ENDPOINT.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_OPENAI_API_KEY=" + .AZURE_OPENAI_API_KEY.value' >> ../.env       
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_OPENAI_DEPLOYMENT=" + .AZURE_OPENAI_DEPLOYMENT.value' >> ../.env
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME=" + .AZURE_OPENAI_DEPLOYMENT.value' >> ../.env      
    - silent: true
      cmd: echo '{{.TF_OUTPUT}}' | jq -r '"AZURE_AI_MODEL_DEPLOYMENT_NAME=" + .AZURE_OPENAI_DEPLOYMENT.value' >> ../.env      
    - silent: true
      cmd: echo -e '\tüîπ\033[1m\e[38;5;45m Now copy and paste the following command to source the variables:' &&
           echo -e '\t‚û°Ô∏è\033[1m\e[38;5;45m `source ../.env`'
    vars:
      TF_OUTPUT: 
        sh: terraform output -json